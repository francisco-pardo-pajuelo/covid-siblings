*- Only child and siblings in COVID

capture program drop main 
program define main 

	setup_COVID_A03
	
	
	*------ Final Runs 
	twfe_2_4_6_8 siblings oldest 20_21
	twfe_2_4_6_8 siblings all	 20_21
	twfe_2_4_6_8 siblings oldest all
	twfe_2_4_6_8 siblings all	 all
	
	twfe_age_gap 	siblings oldest 20_21 all
	twfe_dual 		siblings oldest 20_21 all "lives_with_mother"
	twfe_dual 		siblings oldest 20_21 all "mom_sec_complete"
	
	twfe_age_gap 	siblings oldest 20_21 elm
	twfe_dual 		siblings oldest 20_21 elm "lives_with_mother"
	twfe_dual 		siblings oldest 20_21 elm "mom_sec_complete"	

	twfe_age_gap 	siblings all 20_21
	twfe_dual 		siblings all 20_21 "lives_with_mother"
	twfe_dual 		siblings all 20_21 "mom_sec_complete"

	
	event_gpa		siblings oldest 						// other_filters "e.g. rural_young_hed_both"
	event_gpa		siblings all 						// other_filters "e.g. rural_young_hed_both"
	
	
	
	
	
	*- M
	***** Main Results
	*- TWFE Estimates *** EDITED
	twfe_summary 	siblings oldest
	twfe_A 			siblings oldest //School characteristics
	twfe_B 			siblings oldest //Student demographics - gender and age
	twfe_C 			siblings oldest //Family Structure - Siblings
	twfe_D 			siblings oldest //Family Structure - Parents
	
	
	
	***** Robustness
	twfe_summary 	siblings youngest
	twfe_summary 	siblings middle
	twfe_summary 	siblings all
	
	
	*- TWFE by age of oldest
											//twfe_age_sibling siblings oldest age_youngest
											//twfe_age_sibling siblings second age_oldest
	
											*- Placebo TWFE
											//twfe_placebo internet
											//twfe_placebo parent_ed
											//twfe_placebo both_parents
											
											//twfe_cohorts //Should not be done as it does not address the age trend.
	*- TWFE by grade
	twfe_grades siblings
	
	*- Placebo TWFE by grade
											//twfe_placebo_grades internet
	//twfe_placebo_grades parent_ed
	//twfe_placebo_grades both_parents
	
	*- Event Study 
	event_gpa		siblings oldest 						// other_filters "e.g. rural_young_hed_both"
	event_gpa		siblings oldest rural_young_hed_both 	// other_filters "e.g. rural_young_hed_both"
	

	//event_cohort_grade
	
	
	/*
	* TESTS
	twfe_test 	siblings oldest
	event_test 	siblings oldest
	*/


	
end

********************************************************************************
* Setup
********************************************************************************

capture program drop setup_COVID_A03
program define setup_COVID_A03

	*- Define if test run
	global covid_test = 1
	global covid_data = ""
	if ${covid_test} == 1 global covid_data = "_TEST"
	
	*- Only analyze specific outcomes
	global main_outcomes=1
	global main_outcome_1 = "std_gpa_m_adj"
	global main_outcome_2 = "" //pass_math
	global main_outcome_3 = "" //higher_ed_parent
	
	global main_loop = 0
	global main_loop_level	= "all"
	global main_loop_only_covid = "all"

	*- Global variables
	global fam_type=2
	global max_sibs = 4
	global x_all 			= "male_siagie age_mother age_mother_1st_oldest_${fam_type} i.educ_cat_mother"
	global x_all_vars 		= "male_siagie age_mother age_mother_1st_oldest_${fam_type} educ_cat_mother"
	//global x_complete 		= "male_siagie age_mother age_mother_1st_oldest_${fam_type} i.educ_cat_mother"
	//global x_complete_vars 	= "male_siagie age_mother age_mother_1st_oldest_${fam_type} educ_cat_mother"
	global x_nohigher_ed 	= "male_siagie age_mother age_mother_1st_oldest_${fam_type}"
	
	
	*- Colorpalette
	colorpalette  HCL blues, selec(1 5 9 11) nograph
	return list

	global blue_1 = "`r(p1)'"
	global blue_2 = "`r(p2)'"
	global blue_3 = "`r(p3)'"
	global blue_4 = "`r(p4)'"
	global blue_5 = "`r(p5)'"
	//local blue_6 = "`r(p6)'"

	//colorpalette  HCL reds, selec(1 4 6 8 10 12) nograph
	colorpalette  HCL reds, selec(2 5 9 11) nograph
	return list

	global red_1 = "`r(p1)'"
	global red_2 = "`r(p2)'"
	global red_3 = "`r(p3)'"	
	global red_4 = "`r(p4)'"
	
	colorpalette  HCL greens, selec(2 5 9 11) nograph
	return list

	global green_1 = "`r(p1)'"
	global green_2 = "`r(p2)'"
	global green_3 = "`r(p3)'"		
	global green_4 = "`r(p4)'"
	
	//Ellsworth Kelly - Blue Green Red - https://www.metmuseum.org/art/collection/search/489307
	global ek_blue 	"21 53 162"
	global ek_green "19 151 65"
	global ek_red	"221 63 15"
	
end

********************************************************************************
* TWFE 
********************************************************************************


capture program drop twfe_summary
program define twfe_summary


args treatment_type subsample       //treatment_type: treatment type (generally by # of siblings). 

capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"		


	clear

	*- TWFE Estimates
	foreach v in /*"std_gpa_m" "std_gpa_c"*/ "std_gpa_m_adj" "std_gpa_c_adj" "pass_math" "pass_read" "prim_on_time" "higher_ed_parent" /*"approved" "approved_first"*/ {
		foreach only_covid in "all" "20_21"  {
			foreach level in "all" "elm" "sec" {
					
				if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
				if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
				if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue

				estimates clear
				global x = "$x_all"
				if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
				
				use ///
				/*OUTCOME*/		`v'  ///
				/*ID*/ 			id_ie id_per_umc year grade ///
				/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
				/*DID*/			treated post treated_post ///
				/*EVENT*/		year_t_?? ///
				/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
				/*A*/ 			min_socioec_index_ie_cat quart_class_size quart_grade_size /*OTHER IN DEMOG*/ ///
				/*B*/			/*GRADE AND MALE*/ ///
				/*C*/			///closest_age_gap* ///
				/*D*/			educ_cat_mother /*higher_ed_parent*/ lives_with_mother lives_with_father ///
				/*Other*/		/**has_internet *has_comp *low_ses *quiet_room*/ ///
				using "$TEMP\pre_reg_covid${covid_data}", clear
				
				*- School has internet
				merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)

				
				if "`treatment_type'"=="internet" {
					drop treated treated_post
					gen treated = internet==1
					gen treated_post = treated*post
					local lab_control = "No Internet"
					local lab_treated = "Internet"
				}	

				if "`treatment_type'"=="parent_ed" {
					drop treated treated_post
					gen treated = (educ_cat_mother==3)
					gen treated_post = treated*post
					local lab_control = "Mother no higher ed."
					local lab_treated = "Mother some higher ed."
				}

				if "`treatment_type'"=="both_parents" {
					drop treated treated_post
					gen treated = (lives_with_mother==1 & lives_with_father==1)
					gen treated_post = treated*post
					local lab_control = "Does not live with both"
					local lab_treated = "Lives with both parents"
				}	
				
				if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
				if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
				if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
				if "`subsample'" == "all" 		di "All siblings"
					
				*- Remove early grades and years
				keep if year>=2016
				drop if grade==0
				
				*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
				if "`only_covid'" == "20_21" keep if year<=2021
				
				*- Divide sample based on grade in 2020
				//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
				
				*- Divide sample based on expected cohort
				bys id_per_umc: egen min_year 		= min(year)
				bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
				gen proxy_1st = min_year - grade_min_year  + 1
								
				
				/*
				*- Not enough pre-years
							
				drop if inlist(grade_2020,1,2)==1
				drop if grade_2020==3 & year<=2017 //<=2017 Would only include those who repeated..
				drop if grade_2020==4 & year<=2016 //<=2016 Would only include those who repeated..
				keep if proxy_1st <= 2018
				*/
				
				
				/*
				if "`area'" == "rur" keep if urban_siagie == 0
				if "`area'" == "urb" keep if urban_siagie == 1

				if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
				if "`hed_parent'" == "yes" 	keep if higher_ed_parent == 1
				*/
				
				if "`level'" == "all" {
					keep if grade>=1 & grade<=11
					//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
					gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
					local young_lab = "Primary" //Primary in 2020
					local old_lab 	= "Secondary"
					}
				if "`level'" == "elm" {
					keep if grade>=1 & grade<=6
					//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
					//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
					//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
					//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
					gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
					local young_lab = "1st-3rd grade"
					local old_lab 	= "4th-6th grade"
					}
				if "`level'" == "sec" {
					keep if grade>=7	
					//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
					//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
					//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
					gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
					local young_lab = "7th-8th grade"
					local old_lab 	= "9th-11th grade"
					}

				local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				if "`v'" == "std_gpa_m" 		{
					local vlab = "gpa_m"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c" 		{
					local vlab = "gpa_c"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "std_gpa_m_adj" 		{
					local vlab = "gpa_m_adj"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c_adj" 		{
					local vlab = "gpa_c_adj"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "pass_math" 		{
					local vlab = "pass_m"
					local xtitle = "% A's Mathematics"
					}
				if "`v'" == "pass_read" 		{
					local vlab = "pass_c"
					local xtitle = "% A's Reading"
					}
				if "`v'" == "approved" 		{
					local vlab = "pass"
					local xtitle = "Grade Promotion"
					}
				if "`v'" == "approved_first" 		{
					local vlab = "passf"
					local xtitle = "Grade Promotion without recovery"
					}
				if "`v'" == "higher_ed_parent" 		{
					local vlab = "hed_parent"
					local xtitle = "% Parent with higher education"
					}
		
				* All students
				di as result "*******" _n as text "All" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 , a(grade year id_ie)
				estimates store all_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 , a(grade year id_ie)
				estimates store all_`vlab'_2
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1  , a(grade year id_ie)
				estimates store all_`vlab'_3
				if ${max_sibs} == 4 eststo all_`vlab'_4: reghdfe `v' 		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1  , a(grade year id_ie)
				
				*****
				* Panel A: Confounders: Type of school
				*****			
				*- Urban/Rural
				di as result "*******" _n as text "Urban" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & urban_siagie==1 , a(grade year id_ie)
				estimates store urb_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & urban_siagie==1 , a(grade year id_ie)
				estimates store urb_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & urban_siagie==1  , a(grade year id_ie)
				estimates store urb_`vlab'_3
				if ${max_sibs} == 4 eststo urb_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & urban_siagie==1  , a(grade year id_ie)

				di as result "*******" _n as text "Rural" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & urban_siagie==0 , a(grade year id_ie)
				estimates store rur_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & urban_siagie==0 , a(grade year id_ie)
				estimates store rur_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & urban_siagie==0  , a(grade year id_ie)
				estimates store rur_`vlab'_3
				if ${max_sibs} == 4 eststo rur_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & urban_siagie==0  , a(grade year id_ie)
				
				*- Internet/No Internet
				di as result "*******" _n as text "Internet in school" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & internet==1, a(grade year id_ie)
				estimates store int_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & internet==1 , a(grade year id_ie)
				estimates store int_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & internet==1  , a(grade year id_ie)
				estimates store int_`vlab'_3
				if ${max_sibs} == 4 eststo int_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & internet==1  , a(grade year id_ie)

				di as result "*******" _n as text "No internet in school" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & internet==0 , a(grade year id_ie)
				estimates store nin_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & internet==0 , a(grade year id_ie)
				estimates store nin_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & internet==0  , a(grade year id_ie)
				estimates store nin_`vlab'_3
				if ${max_sibs} == 4 eststo nin_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & internet==0  , a(grade year id_ie)
				/*
				*- Public/Private
				di as result "*******" _n as text "Public" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & public_siagie==1, a(grade year id_ie)
				estimates store all_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & public_siagie==1 , a(grade year id_ie)
				estimates store pub_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & public_siagie==1  , a(grade year id_ie)
				estimates store pub_`vlab'_3
				if ${max_sibs} == 4 eststo pub_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & public_siagie==1  , a(grade year id_ie)

				di as result "*******" _n as text "Private" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & public_siagie==0, a(grade year id_ie)
				estimates store all_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & public_siagie==0 , a(grade year id_ie)
				estimates store pri_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & public_siagie==0  , a(grade year id_ie)
				estimates store pri_`vlab'_3
				if ${max_sibs} == 4 eststo pri_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & public_siagie==0  , a(grade year id_ie)
				*/
				*- Low SES/High SES schools
				di as result "*******" _n as text "Low SES IE" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & min_socioec_index_ie_cat==1 , a(grade year id_ie)
				estimates store low_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & min_socioec_index_ie_cat==1 , a(grade year id_ie)
				estimates store low_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & min_socioec_index_ie_cat==1  , a(grade year id_ie)
				estimates store low_`vlab'_3
				if ${max_sibs} == 4 eststo low_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & min_socioec_index_ie_cat==1  , a(grade year id_ie)

				di as result "*******" _n as text "High SES IE" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & min_socioec_index_ie_cat==4, a(grade year id_ie)
				estimates store hig_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & min_socioec_index_ie_cat==4 , a(grade year id_ie)
				estimates store hig_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & min_socioec_index_ie_cat==4  , a(grade year id_ie)
				estimates store hig_`vlab'_3
				if ${max_sibs} == 4 eststo hig_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & min_socioec_index_ie_cat==4  , a(grade year id_ie)	

				*- By age
				di as result "*******" _n as text "Younger cohort" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & young==1 , a(grade year id_ie)
				estimates store young_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & young==1 , a(grade year id_ie)
				estimates store young_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & young==1  , a(grade year id_ie)
				estimates store young_`vlab'_3
				if ${max_sibs} == 4 eststo young_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & young==1  , a(grade year id_ie)
				
				di as result "*******" _n as text "Older cohort" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & young==0, a(grade year id_ie)
				estimates store old_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & young==0 , a(grade year id_ie)
				estimates store old_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & young==0  , a(grade year id_ie)
				estimates store old_`vlab'_3
				if ${max_sibs} == 4 eststo old_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & young==0  , a(grade year id_ie)
		
				*- Birth Order
				di as result "*******" _n as text "Oldest" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & inlist(fam_order_${fam_type},1)==1, a(grade year id_ie)
				estimates store first_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & inlist(fam_order_${fam_type},1)==1 , a(grade year id_ie)
				estimates store first_`vlab'_2
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & inlist(fam_order_${fam_type},1)==1  , a(grade year id_ie)
				estimates store first_`vlab'_3
				if ${max_sibs} == 4 eststo first_`vlab'_4: reghdfe `v' 		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & inlist(fam_order_${fam_type},1)==1  , a(grade year id_ie)
					
				*- Mother's education
				di as result "*******" _n as text "Some level of higher education" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & educ_cat_mother==3 , a(grade year id_ie)
				estimates store edu3_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & educ_cat_mother==3 , a(grade year id_ie)
				estimates store edu3_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & educ_cat_mother==3  , a(grade year id_ie)
				estimates store edu3_`vlab'_3
				if ${max_sibs} == 4 eststo edu3_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & educ_cat_mother==3  , a(grade year id_ie)
				
				*- Lives with parents
				di as result "*******" _n as text "Only lives with one parent" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  &  ((lives_with_mother==1 & lives_with_father==0) | (lives_with_mother==0 & lives_with_father==1)), a(grade year id_ie)
				estimates store one_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 &  ((lives_with_mother==1 & lives_with_father==0) | (lives_with_mother==0 & lives_with_father==1)) , a(grade year id_ie)
				estimates store one_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((lives_with_mother==1 & lives_with_father==0) | (lives_with_mother==0 & lives_with_father==1))   , a(grade year id_ie)
				estimates store one_`vlab'_3
				if ${max_sibs} == 4 eststo one_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((lives_with_mother==1 & lives_with_father==0) | (lives_with_mother==0 & lives_with_father==1))   , a(grade year id_ie)
				
				
				if ${max_sibs}==4 local legend_child_${max_sibs} = "4 children"	
				if ${max_sibs}==4 local legend_sib_${max_sibs} = "3 siblings"	
				
				if inlist("`v'","std_gpa_m","std_gpa_c","std_gpa_m_adj","std_gpa_c_adj")==1 {
					local xmin 		= -0.1
					local xmin_2 	= -0.1
					local xmin_3 	= -0.1
					local xmin_4 	= -0.1
					local xlines 	= "-.1 -.08 -.06 -.04 -.02 .02"
					local xlines_sibs = "-.1 -.08 -.06 -.04 -.02 .02"
				}
				if inlist("`v'","pass_math","pass_read","approved", "approved_first")==1 {
					local xmin = -0.04
					local xlines = "-.04 -.02 .02"
				}
				
				if inlist("`v'","higher_ed_parent")==1 {
					local xmin = -0.02
					local xlines = "-.02 0 .02"
				}				
				 
				*Only main TWFE 
				foreach num_sibs in "" "_2" "_3" "_4" {
					if "`num_sibs'" == "" 	global twfe_color = "black"
					if "`num_sibs'" == "_2" global twfe_color = "${ek_blue}"
					if "`num_sibs'" == "_3" global twfe_color = "${ek_green}"
					if "`num_sibs'" == "_4" global twfe_color = "${ek_red}"
					
					coefplot 	(all_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("All Students") ///
								||  ///
								///(urb_`vlab'`num_sibs'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								///(urb_`vlab'`num_sibs'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
								///(urb_`vlab'`num_sibs'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
								///, ///
								///bylabel("Urban") ///
								///||  ///
								(rur_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Rural") ///
								||  ///
								(int_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Internet in school") ///
								||  ///
								(nin_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("No internet in school") ///
								||  ///
								///(hig_`vlab'`num_sibs'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								///(hig_`vlab'`num_sibs'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
								///(hig_`vlab'`num_sibs'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
								///, ///
								///bylabel("Top 25%" "SES schools") ///
								///||  ///
								(low_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Bottom 25%" "SES schools") ///
								||  ///
								(young_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("`young_lab'") ///
								|| ///
								(old_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("`old_lab'") ///
								||  ///
								(first_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Oldest child") ///
								||  ///
								(edu3_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Mother with some level" "of Higher ed.") ///
								||  ///
								(one_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Lives with one parent") ///
								||  ///
								, ///
								keep(treated_post) ///
								xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
								///xlabel(`xmin'(0.02)0.02) ///
								xlabel(#5) ///								
								xline(0, lcolor(gs12)) ///
								///xline(`xlines', lcolor(gs15))  ///
								grid(none) ///
								bycoefs	
					
							
					*- All TWFE by # of siblings	
					di as result "*******" _n as text "About to graph (Value: ${covid_data})" _n as result "*******"
					
					if "${covid_data}" == "_TEST" {
						di "TEST"
						capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_summ_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_summ_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
						}
					if "${covid_data}" == "" {
						di "REAL"
						capture qui graph export "$FIGURES\TWFE\covid_twfe_summ_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES\TWFE\covid_twfe_summ_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
						}	
					}
				
				
//covid_twfe_summ_elm_20_21_gpa_m_2_Tsiblings_Soldest_4_TEST			
				 
				coefplot 	(all_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							(all_`vlab'_3, mcolor("${ek_green}") 	ciopts(color("${ek_green}"))) ///
							(all_`vlab'_4, mcolor("${ek_red}") 		ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("All Students") ///
							||  ///
							///(urb_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							///(urb_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							///(urb_`vlab'_4, mcolor("${ek_red}") 	ciopts(color("${ek_red}"))) ///
							///, ///
							///bylabel("Urban") ///
							///||  ///
							(rur_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							(rur_`vlab'_3, mcolor("${ek_green}") 	ciopts(color("${ek_green}"))) ///
							(rur_`vlab'_4, mcolor("${ek_red}") 		ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Rural") ///
							||  ///
							(int_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							(int_`vlab'_3, mcolor("${ek_green}") 	ciopts(color("${ek_green}"))) ///
							(int_`vlab'_4, mcolor("${ek_red}") 		ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Internet in school") ///
							||  ///
							(nin_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							(nin_`vlab'_3, mcolor("${ek_green}") 	ciopts(color("${ek_green}"))) ///
							(nin_`vlab'_4, mcolor("${ek_red}") 		ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("No internet in school") ///
							||  ///
							///(hig_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							///(hig_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							///(hig_`vlab'_4, mcolor("${ek_red}") 	ciopts(color("${ek_red}"))) ///
							///, ///
							///bylabel("Top 25%" "SES schools") ///
							///||  ///
							(low_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							(low_`vlab'_3, mcolor("${ek_green}") 	ciopts(color("${ek_green}"))) ///
							(low_`vlab'_4, mcolor("${ek_red}") 		ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Bottom 25%" "SES schools") ///
							||  ///
							(young_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							(young_`vlab'_3, mcolor("${ek_green}") 	ciopts(color("${ek_green}"))) ///
							(young_`vlab'_4, mcolor("${ek_red}") 	ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("`young_lab'") ///
							|| ///
							(old_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							(old_`vlab'_3, mcolor("${ek_green}") 	ciopts(color("${ek_green}"))) ///
							(old_`vlab'_4, mcolor("${ek_red}") 		ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("`old_lab'") ///
							||  ///
							(first_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							(first_`vlab'_3, mcolor("${ek_green}") 	ciopts(color("${ek_green}"))) ///
							(first_`vlab'_4, mcolor("${ek_red}") 	ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Oldest child") ///
							||  ///
							(edu3_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							(edu3_`vlab'_3, mcolor("${ek_green}") 	ciopts(color("${ek_green}"))) ///
							(edu3_`vlab'_4, mcolor("${ek_red}") 	ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Mother with some level" "of Higher ed.") ///
							||  ///
							(one_`vlab'_2, mcolor("${ek_blue}") 	ciopts(color("${ek_blue}"))) ///
							(one_`vlab'_3, mcolor("${ek_green}") 	ciopts(color("${ek_green}"))) ///
							(one_`vlab'_4, mcolor("${ek_red}") 		ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Lives with one parent") ///
							||  ///
							, ///
							keep(treated_post) ///
							legend(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'") col(3) pos(6)) ///
							xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
							///xlabel(`xmin'(0.02)0.02) ///
							xlabel(#5) ///								
							xline(0, lcolor(gs12)) ///
							///xline(`xlines', lcolor(gs15))  ///
							grid(none) ///
							bycoefs	
				
						
				//graph save "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.gph" , replace	
				//capture qui graph export "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.eps", replace	
				if "${covid_data}" == "_TEST" {
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_summ_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_summ_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}
				if "${covid_data}" == "" {
					capture qui graph export "$FIGURES\TWFE\covid_twfe_summ_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES\TWFE\covid_twfe_summ_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}				
			}
		}
	}
end
		


capture program drop twfe_A
program define twfe_A
		
args treatment_type subsample       //treatment_type: treatment type (generally by # of siblings). 
	
di "TWFE: A"

				
capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"				

	clear

	*- TWFE Estimates
	foreach v in /*"std_gpa_m" "std_gpa_c"*/ "std_gpa_m_adj" "std_gpa_c_adj" "pass_math" "pass_read" "prim_on_time" "higher_ed_parent" /*"approved" "approved_first"*/ {
		foreach only_covid in "all" "20_21"  {
			foreach level in "all" "elm" "sec" {
						
			if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
			if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
			if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue
			
			estimates clear
			global x = "$x_all"
			if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
			

			use ///
			/*OUTCOME*/		`v'  ///
			/*ID*/ 			id_ie id_per_umc year grade ///
			/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
			/*DID*/			treated post treated_post ///
			/*EVENT*/		year_t_?? ///
			/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
			/*A*/ 			min_socioec_index_ie_cat quart_class_size quart_grade_size /*OTHER IN DEMOG*/ ///
			/*B*/			/*GRADE AND MALE*/ ///
			/*C*/			///closest_age_gap* ///
			/*D*/			///educ_cat_mother higher_ed_parent lives_with_mother lives_with_father ///
			/*Other*/		/**has_internet *has_comp *low_ses *quiet_room*/ ///
			using "$TEMP\pre_reg_covid${covid_data}", clear
			
			*- School has internet
			merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)

			
			if "`treatment_type'"=="internet" {
				drop treated treated_post
				gen treated = internet==1
				gen treated_post = treated*post
				local lab_control = "No Internet"
				local lab_treated = "Internet"
			}	

			if "`treatment_type'"=="parent_ed" {
				drop treated treated_post
				gen treated = (educ_cat_mother==3)
				gen treated_post = treated*post
				local lab_control = "Mother no higher ed."
				local lab_treated = "Mother some higher ed."
			}

			if "`treatment_type'"=="both_parents" {
				drop treated treated_post
				gen treated = (lives_with_mother==1 & lives_with_father==1)
				gen treated_post = treated*post
				local lab_control = "Does not live with both"
				local lab_treated = "Lives with both parents"
			}	
			
				if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
				if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
				if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
				if "`subsample'" == "all" 		di "All siblings"		
		
			*- Remove early grades and years
			keep if year>=2016
			drop if grade==0
				
			*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
			if "`only_covid'" == "20_21" keep if year<=2021			
			
			*- Divide sample based on grade in 2020
			//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
			
			*- Divide sample based on expected cohort
			bys id_per_umc: egen min_year 		= min(year)
			bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
			gen proxy_1st = min_year - grade_min_year  + 1
							
			
			/*
			*- Not enough pre-years
						
			drop if inlist(grade_2020,1,2)==1
			drop if grade_2020==3 & year<=2017 //<=2017 Would only include those who repeated..
			drop if grade_2020==4 & year<=2016 //<=2016 Would only include those who repeated..
			keep if proxy_1st <= 2018
			*/
			
			
			/*
			if "`area'" == "rur" keep if urban_siagie == 0
			if "`area'" == "urb" keep if urban_siagie == 1

			if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
			if "`hed_parent'" == "yes" 	keep if higher_ed_parent == 1
			*/
			
			if "`level'" == "all" {
				keep if grade>=1 & grade<=11
				//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
				gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
				local young_lab = "Primary" //Primary in 2020
				local old_lab 	= "Secondary"
				}
			if "`level'" == "elm" {
				keep if grade>=1 & grade<=6
				//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
				//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
				//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
				//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
				gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
				local young_lab = "1st-3rd grade"
				local old_lab 	= "4th-6th grade"
				}
			if "`level'" == "sec" {
				keep if grade>=7	
				//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
				//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
				//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
				gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
				local young_lab = "7th-8th grade"
				local old_lab 	= "9th-11th grade"
				}
				

				local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				if "`v'" == "std_gpa_m" 		{
					local vlab = "gpa_m"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c" 		{
					local vlab = "gpa_c"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "std_gpa_m_adj" 		{
					local vlab = "gpa_m_adj"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c_adj" 		{
					local vlab = "gpa_c_adj"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "pass_math" 		{
					local vlab = "pass_m"
					local xtitle = "% A's Mathematics"
					}
				if "`v'" == "pass_read" 		{
					local vlab = "pass_c"
					local xtitle = "% A's Reading"
					}
				if "`v'" == "approved" 		{
					local vlab = "pass"
					local xtitle = "Grade Promotion"
					}
				if "`v'" == "approved_first" 		{
					local vlab = "passf"
					local xtitle = "Grade Promotion without recovery"
					}
				if "`v'" == "higher_ed_parent" 		{
					local vlab = "hed_parent"
					local xtitle = "% Parent with higher education"
					}
	
			* All students
			di as result "*******" _n as text "All" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 , a(grade year id_ie)
			estimates store all_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 , a(grade year id_ie)
			estimates store all_`vlab'_2
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1  , a(grade year id_ie)
			estimates store all_`vlab'_3
			if ${max_sibs} == 4 eststo all_`vlab'_4: reghdfe `v' 		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1  , a(grade year id_ie)
			
			*****
			* Panel A: Confounders: Type of school
			*****			
			*- Urban/Rural
			di as result "*******" _n as text "Urban" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & urban_siagie==1 , a(grade year id_ie)
			estimates store urb_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & urban_siagie==1 , a(grade year id_ie)
			estimates store urb_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & urban_siagie==1  , a(grade year id_ie)
			estimates store urb_`vlab'_3
			if ${max_sibs} == 4 eststo urb_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & urban_siagie==1  , a(grade year id_ie)

			di as result "*******" _n as text "Rural" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & urban_siagie==0 , a(grade year id_ie)
			estimates store rur_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & urban_siagie==0 , a(grade year id_ie)
			estimates store rur_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & urban_siagie==0  , a(grade year id_ie)
			estimates store rur_`vlab'_3
			if ${max_sibs} == 4 eststo rur_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & urban_siagie==0  , a(grade year id_ie)
			
			*- Internet/No Internet
			di as result "*******" _n as text "Internet in school" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & internet==1 , a(grade year id_ie)
			estimates store int_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & internet==1 , a(grade year id_ie)
			estimates store int_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & internet==1  , a(grade year id_ie)
			estimates store int_`vlab'_3
			if ${max_sibs} == 4 eststo int_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & internet==1  , a(grade year id_ie)

			di as result "*******" _n as text "No internet in school" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & internet==0 , a(grade year id_ie)
			estimates store nin_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & internet==0 , a(grade year id_ie)
			estimates store nin_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & internet==0  , a(grade year id_ie)
			estimates store nin_`vlab'_3
			if ${max_sibs} == 4 eststo nin_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & internet==0  , a(grade year id_ie)
			
			*- Public/Private
			di as result "*******" _n as text "Public" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & public_siagie==1 , a(grade year id_ie)
			estimates store pub_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & public_siagie==1 , a(grade year id_ie)
			estimates store pub_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & public_siagie==1  , a(grade year id_ie)
			estimates store pub_`vlab'_3
			if ${max_sibs} == 4 eststo pub_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & public_siagie==1  , a(grade year id_ie)

			di as result "*******" _n as text "Private" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & public_siagie==0 , a(grade year id_ie)
			estimates store pri_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & public_siagie==0 , a(grade year id_ie)
			estimates store pri_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & public_siagie==0  , a(grade year id_ie)
			estimates store pri_`vlab'_3
			if ${max_sibs} == 4 eststo pri_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & public_siagie==0  , a(grade year id_ie)
			
			*- Low SES/High SES schools
			di as result "*******" _n as text "Low SES IE" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & min_socioec_index_ie_cat==1 , a(grade year id_ie)
			estimates store low_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & min_socioec_index_ie_cat==1 , a(grade year id_ie)
			estimates store low_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & min_socioec_index_ie_cat==1  , a(grade year id_ie)
			estimates store low_`vlab'_3
			if ${max_sibs} == 4 eststo low_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & min_socioec_index_ie_cat==1  , a(grade year id_ie)

			di as result "*******" _n as text "High SES IE" _n as result 
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & min_socioec_index_ie_cat==4 , a(grade year id_ie)
			estimates store hig_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & min_socioec_index_ie_cat==4 , a(grade year id_ie)
			estimates store hig_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & min_socioec_index_ie_cat==4  , a(grade year id_ie)
			estimates store hig_`vlab'_3
			if ${max_sibs} == 4 eststo hig_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & min_socioec_index_ie_cat==4  , a(grade year id_ie)	

			*- Low SES + Public
			di as result "*******" _n as text "Low SES + Public" _n as result "*******"		
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & min_socioec_index_ie_cat==1 & public_siagie==1 , a(grade year id_ie)
			estimates store pubL_`vlab'	
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & min_socioec_index_ie_cat==1 & public_siagie==1 , a(grade year id_ie)
			estimates store pubL_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & min_socioec_index_ie_cat==1 & public_siagie==1  , a(grade year id_ie)
			estimates store pubL_`vlab'_3
			if ${max_sibs} == 4 eststo pubL_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & min_socioec_index_ie_cat==1 &  public_siagie==1 , a(grade year id_ie)

	
			*- High SES + Private
			di as result "*******" _n as text "High SES + Private" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & min_socioec_index_ie_cat==4 & public_siagie==0 , a(grade year id_ie)
			estimates store priH_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & min_socioec_index_ie_cat==4 & public_siagie==0 , a(grade year id_ie)
			estimates store priH_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & min_socioec_index_ie_cat==4 & public_siagie==0, a(grade year id_ie)
			estimates store priH_`vlab'_3
			if ${max_sibs} == 4 eststo priH_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & min_socioec_index_ie_cat==4 &  public_siagie==0 , a(grade year id_ie)				
			*- Class size Q1 (Bottom 25%)
			di as result "*******" _n as text "Low class size" _n as result "*******"		
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & quart_class_size==1 , a(grade year id_ie)
			estimates store sma_`vlab'		
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & quart_class_size==1 , a(grade year id_ie)
			estimates store sma_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & quart_class_size==1, a(grade year id_ie)
			estimates store sma_`vlab'_3
			if ${max_sibs} == 4 eststo sma_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & quart_class_size==1 , a(grade year id_ie)	

	
			*- Class size Q4 (Top 25%)
			di as result "*******" _n as text "Top class size" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & quart_class_size==4 , a(grade year id_ie)
			estimates store big_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & quart_class_size==4 , a(grade year id_ie)
			estimates store big_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & quart_class_size==4, a(grade year id_ie)
			estimates store big_`vlab'_3
			if ${max_sibs} == 4 eststo big_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & quart_class_size==4 , a(grade year id_ie)							
			
			
			
			if ${max_sibs}==4 local legend_child_${max_sibs} = "4 children"	
			if ${max_sibs}==4 local legend_sib_${max_sibs} = "3 siblings"	
	
				
				if inlist("`v'","std_gpa_m","std_gpa_c","std_gpa_m_adj","std_gpa_c_adj")==1 {
					local xmin = -0.1
					local xlines = "-.1 -.08 -.06 -.04 -.02 .02"
				}
				if inlist("`v'","pass_math","pass_read","approved", "approved_first")==1 {
					local xmin = -0.04
					local xlines = "-.04 -.02 .02"
				}
				
				if inlist("`v'","higher_ed_parent")==1 {
					local xmin = -0.02
					local xlines = "-.02 0 .02"
				}					 
				
				foreach num_sibs in "" "_2" "_3" "_4" {
					if "`num_sibs'" == "" 	global twfe_color = "black"
					if "`num_sibs'" == "_2" global twfe_color = "${ek_blue}"
					if "`num_sibs'" == "_3" global twfe_color = "${ek_green}"
					if "`num_sibs'" == "_4" global twfe_color = "${ek_red}"
					
					*Only main TWFE 
					coefplot 	(all_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("All Students") ///
								||  ///
								(urb_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Urban") ///
								||  ///
								(rur_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Rural") ///
								||  ///
								(int_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Internet in school") ///
								||  ///
								(nin_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("No internet in school") ///
								||  ///
								(pub_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Public Schools") ///
								||  ///
								(pri_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Private Schools") ///
								||  ///
								(low_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Bottom 25%" "SES schools") ///
								||  ///
								(hig_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Top 25%" "SES schools") ///
								||  ///
								(pubL_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Public + Bottom 25%" "SES schools") ///
								||  ///
								(priH_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Private + Top 25%" "SES schools") ///
								||  ///
								(sma_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Bottom 25%" "class size") ///
								||  ///
								(big_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Top 25%" "class size") ///
								||  ///
								, ///
								keep(treated_post) ///
								xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
								///xlabel(`xmin'(0.02)0.02) ///
								xlabel(#5) ///								
								xline(0, lcolor(gs12)) ///
								///xline(`xlines', lcolor(gs15))  ///
								grid(none) ///
								bycoefs	
					
							
					*- All TWFE by # of siblings	
					if "${covid_data}" == "_TEST" {
						capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_A_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_A_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
						}
					if "${covid_data}" == "" {
						capture qui graph export "$FIGURES\TWFE\covid_twfe_A_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES\TWFE\covid_twfe_A_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
						}	 
				 
				}
				
				coefplot 	(all_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(all_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(all_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("All Students") ///
							||  ///
							(urb_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(urb_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(urb_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Urban") ///
							||  ///
							(rur_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(rur_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(rur_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Rural") ///
							||  ///
							(int_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(int_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(int_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Internet in school") ///
							||  ///
							(nin_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(nin_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(nin_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("No internet in school") ///
							||  ///
							(pub_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(pub_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(pub_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Public schools") ///
							||  ///
							(pri_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(pri_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(pri_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Private schools") ///
							||  ///
							(low_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(low_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(low_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Bottom 25%" "SES schools") ///
							||  ///
							(hig_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(hig_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(hig_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Top 25%" "SES schools") ///
							||  ///
							(pubL_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(pubL_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(pubL_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Public + Bottom 25%" "SES schools") ///
							||  ///
							(priH_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(priH_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(priH_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Private + Top 25%" "SES schools") ///
							||  ///
							(sma_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(sma_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(sma_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Bottom 25%" "class size") ///
							||  ///
							(big_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(big_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(big_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Top 25%" "class size") ///
							|| ///
							, ///
							keep(treated_post) ///
							legend(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'") col(3) pos(6)) ///
							xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
							///xlabel(`xmin'(0.02)0.02) ///
							xlabel(#5) ///								
							xline(0, lcolor(gs12)) ///
							///xline(`xlines', lcolor(gs15))  ///
							grid(none) ///
							bycoefs	
				
						
				//graph save "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.gph" , replace	
				//capture qui graph export "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.eps", replace	
				if "${covid_data}" == "_TEST" {
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_A_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_A_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}
				if "${covid_data}" == "" {
					capture qui graph export "$FIGURES\TWFE\covid_twfe_A_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES\TWFE\covid_twfe_A_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}	
						
		
			
		}
	}
}

end

***********************************************


capture program drop twfe_B
program define twfe_B
		
args treatment_type subsample       //treatment_type: treatment type (generally by # of siblings). 
	
di "TWFE: B"

				
capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"				

	clear

	*- TWFE Estimates
	foreach v in /*"std_gpa_m" "std_gpa_c"*/ "std_gpa_m_adj" "std_gpa_c_adj" "pass_math" "pass_read" "prim_on_time" "higher_ed_parent" /*"approved" "approved_first"*/ {
		foreach only_covid in "all" "20_21"  {
			foreach level in "all" "elm" "sec" {
						
			if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
			if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
			if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue
			
			estimates clear
			global x = "$x_all"
			if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
			

			use ///
			/*OUTCOME*/		`v'  ///
			/*ID*/ 			id_ie id_per_umc year grade ///
			/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
			/*DID*/			treated post treated_post ///
			/*EVENT*/		year_t_?? ///
			/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
			/*A*/ 			min_socioec_index_ie_cat /*OTHER IN DEMOG*/ ///
			/*B*/			/*GRADE AND MALE*/ ///
			/*C*/			///closest_age_gap* ///
			/*D*/			///educ_cat_mother higher_ed_parent lives_with_mother lives_with_father ///
			/*Other*/		/**has_internet *has_comp *low_ses *quiet_room*/ ///
			using "$TEMP\pre_reg_covid${covid_data}", clear
			
			*- School has internet
			merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)

			
			if "`treatment_type'"=="internet" {
				drop treated treated_post
				gen treated = internet==1
				gen treated_post = treated*post
				local lab_control = "No Internet"
				local lab_treated = "Internet"
			}	

			if "`treatment_type'"=="parent_ed" {
				drop treated treated_post
				gen treated = (educ_cat_mother==3)
				gen treated_post = treated*post
				local lab_control = "Mother no higher ed."
				local lab_treated = "Mother some higher ed."
			}

			if "`treatment_type'"=="both_parents" {
				drop treated treated_post
				gen treated = (lives_with_mother==1 & lives_with_father==1)
				gen treated_post = treated*post
				local lab_control = "Does not live with both"
				local lab_treated = "Lives with both parents"
			}	
			
				if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
				if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
				if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
				if "`subsample'" == "all" 		di "All siblings"	
		
			
			
			*- Remove early grades and years
			keep if year>=2016
			drop if grade==0
			
			*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
			if "`only_covid'" == "20_21" keep if year<=2021
			
			*- Divide sample based on grade in 2020
			//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
			
			*- Divide sample based on expected cohort
			bys id_per_umc: egen min_year 		= min(year)
			bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
			gen proxy_1st = min_year - grade_min_year  + 1
							
			
			/*
			*- Not enough pre-years
						
			drop if inlist(grade_2020,1,2)==1
			drop if grade_2020==3 & year<=2017 //<=2017 Would only include those who repeated..
			drop if grade_2020==4 & year<=2016 //<=2016 Would only include those who repeated..
			keep if proxy_1st <= 2018
			*/
			
			
			/*
			if "`area'" == "rur" keep if urban_siagie == 0
			if "`area'" == "urb" keep if urban_siagie == 1

			if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
			if "`hed_parent'" == "yes" 	keep if higher_ed_parent == 1
			*/
			
			if "`level'" == "all" {
				keep if grade>=1 & grade<=11
				//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
				gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
				local young_lab = "Primary" //Primary in 2020
				local old_lab 	= "Secondary"
				}
			if "`level'" == "elm" {
				keep if grade>=1 & grade<=6
				//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
				//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
				//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
				//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
				gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
				local young_lab = "1st-3rd grade"
				local old_lab 	= "4th-6th grade"
				}
			if "`level'" == "sec" {
				keep if grade>=7	
				//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
				//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
				//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
				gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
				local young_lab = "7th-8th grade"
				local old_lab 	= "9th-11th grade"
				}
				

				local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				if "`v'" == "std_gpa_m" 		{
					local vlab = "gpa_m"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c" 		{
					local vlab = "gpa_c"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "std_gpa_m_adj" 		{
					local vlab = "gpa_m_adj"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c_adj" 		{
					local vlab = "gpa_c_adj"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "pass_math" 		{
					local vlab = "pass_m"
					local xtitle = "% A's Mathematics"
					}
				if "`v'" == "pass_read" 		{
					local vlab = "pass_c"
					local xtitle = "% A's Reading"
					}
				if "`v'" == "approved" 		{
					local vlab = "pass"
					local xtitle = "Grade Promotion"
					}
				if "`v'" == "approved_first" 		{
					local vlab = "passf"
					local xtitle = "Grade Promotion without recovery"
					}
				if "`v'" == "higher_ed_parent" 		{
					local vlab = "hed_parent"
					local xtitle = "% Parent with higher education"
					}
	
			* All students
			di as result "*******" _n as text "All" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 , a(grade year id_ie)
			estimates store all_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 , a(grade year id_ie)
			estimates store all_`vlab'_2
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1  , a(grade year id_ie)
			estimates store all_`vlab'_3
			if ${max_sibs} == 4 eststo all_`vlab'_4: reghdfe `v' 		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1  , a(grade year id_ie)
			
			*****
			* Panel B: Confounders - Demographics
			*****
			*- Male/Female
			di as result "*******" _n as text "Boys" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & male_siagie==1 , a(grade year id_ie)
			estimates store mal_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & male_siagie==1 , a(grade year id_ie)
			estimates store mal_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & male_siagie==1  , a(grade year id_ie)
			estimates store mal_`vlab'_3
			if ${max_sibs} == 4 eststo mal_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & male_siagie==1  , a(grade year id_ie)

			di as result "*******" _n as text "Girls" _n as result 
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & male_siagie==0 , a(grade year id_ie)
			estimates store fem_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & male_siagie==0 , a(grade year id_ie)
			estimates store fem_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & male_siagie==0  , a(grade year id_ie)
			estimates store fem_`vlab'_3
			if ${max_sibs} == 4 eststo fem_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & male_siagie==0  , a(grade year id_ie)
								
			*- By level
			di as result "*******" _n as text "Younger cohort" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & young==1 , a(grade year id_ie)
			estimates store young_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & young==1 , a(grade year id_ie)
			estimates store young_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & young==1  , a(grade year id_ie)
			estimates store young_`vlab'_3
			if ${max_sibs} == 4 eststo young_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & young==1  , a(grade year id_ie)
			
			di as result "*******" _n as text "Older cohort" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & young==0 , a(grade year id_ie)
			estimates store old_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & young==0 , a(grade year id_ie)
			estimates store old_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & young==0  , a(grade year id_ie)
			estimates store old_`vlab'_3
			if ${max_sibs} == 4 eststo old_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & young==0  , a(grade year id_ie)
	
			forvalues g = 1(1)11 {
				di as result "*******" _n as text "`level' - `g'" _n as result "*******"
				if "`level'" == "elm" & `g'>=7 continue
				if "`level'" == "sec" & `g'<=6 continue
				di "STILL HERE"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==`g' , a(grade year id_ie)
				estimates store g`g'_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & grade==`g' , a(grade year id_ie)
				estimates store g`g'_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & grade==`g' , a(grade year id_ie)
				estimates store g`g'_`vlab'_3
				if ${max_sibs} == 4 eststo g`g'_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & grade==`g'  , a(grade year id_ie)	
				}			
			
			if ${max_sibs}==4 local legend_child_${max_sibs} = "4 children"	
			if ${max_sibs}==4 local legend_sib_${max_sibs} = "3 siblings"	
	
				
				if inlist("`v'","std_gpa_m","std_gpa_c","std_gpa_m_adj","std_gpa_c_adj")==1 {
					local xmin = -0.1
					local xlines = "-.1 -.08 -.06 -.04 -.02 .02"
				}
				if inlist("`v'","pass_math","pass_read","approved", "approved_first")==1 {
					local xmin = -0.04
					local xlines = "-.04 -.02 .02"
				}
				
				if inlist("`v'","higher_ed_parent")==1 {
					local xmin = -0.02
					local xlines = "-.02 0 .02"
				}
				 
				foreach num_sibs in "" "_2" "_3" "_4" {
					if "`num_sibs'" == "" 	global twfe_color = "black"
					if "`num_sibs'" == "_2" global twfe_color = "${ek_blue}"
					if "`num_sibs'" == "_3" global twfe_color = "${ek_green}"
					if "`num_sibs'" == "_4" global twfe_color = "${ek_red}"					
					*Only main TWFE 
				
				
					if "`level'" == "all" {
						coefplot 	(all_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("All Students") ///
									|| ///
									(mal_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("Boys") ///
									|| ///
									(fem_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("Girls") ///
									|| ///
									(young_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("`young_lab'") ///
									|| ///
									(old_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("`old_lab'") ///
									|| ///
									(g1_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("1st grade") ///	
									|| ///
									(g2_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("2nd grade") ///		
									|| ///
									(g3_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									,  ///
									bylabel("3rd grade") ///		
									|| ///
									(g4_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("4th grade") ///		
									|| ///
									(g5_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("5th grade") ///		
									|| ///
									(g6_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("6th grade") ///		
									|| ///
									(g7_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("7th grade") ///		
									|| ///
									(g8_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("8th grade") ///		
									|| ///
									(g9_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("9th grade") ///		
									|| ///
									(g10_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("10th grade") ///
									|| ///
									(g11_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("11th grade") ///	
									||  ///
									, ///
									keep(treated_post) ///
									xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
									///xlabel(`xmin'(0.02)0.02) ///
									xlabel(#5) ///								
									xline(0, lcolor(gs12)) ///
									///xline(`xlines', lcolor(gs15))  ///
									grid(none) ///
									bycoefs	
					}
					
					if "`level'" == "elm" {
						coefplot 	(all_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("All Students") ///
									|| ///
									(mal_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("Boys") ///
									|| ///
									(fem_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("Girls") ///
									|| ///
									(young_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("`young_lab'") ///
									|| ///
									(old_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("`old_lab'") ///
									|| ///
									(g1_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("1st grade") ///	
									|| ///
									(g2_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("2nd grade") ///		
									|| ///
									(g3_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									,  ///
									bylabel("3rd grade") ///		
									|| ///
									(g4_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("4th grade") ///		
									|| ///
									(g5_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("5th grade") ///		
									|| ///
									(g6_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("6th grade") ///		
									|| ///
									, ///
									keep(treated_post) ///
									xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
									///xlabel(`xmin'(0.02)0.02) ///
									xlabel(#5) ///								
									xline(0, lcolor(gs12)) ///
									///xline(`xlines', lcolor(gs15))  ///
									grid(none) ///
									bycoefs	
					}
					
					if "`level'" == "sec" {
						coefplot 	(all_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("All Students") ///
									|| ///
									(mal_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("Boys") ///
									|| ///
									(fem_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("Girls") ///
									|| ///
									(young_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("`young_lab'") ///
									|| ///
									(old_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("`old_lab'") ///
									|| ///
									(g7_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("7th grade") ///		
									|| ///
									(g8_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("8th grade") ///		
									|| ///
									(g9_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("9th grade") ///		
									|| ///
									(g10_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("10th grade") ///
									|| ///
									(g11_`vlab', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("11th grade") ///	
									||  ///
									, ///
									keep(treated_post) ///
									xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
									///xlabel(`xmin'(0.02)0.02) ///
									xlabel(#5) ///								
									xline(0, lcolor(gs12)) ///
									///xline(`xlines', lcolor(gs15))  ///
									grid(none) ///
									bycoefs	
					}					
							
					*- All TWFE by # of siblings	
					if "${covid_data}" == "_TEST" {
						capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_B_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_B_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
						}
					if "${covid_data}" == "" {
						capture qui graph export "$FIGURES\TWFE\covid_twfe_B_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES\TWFE\covid_twfe_B_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
						}	 
				 
				} 
				
				if "`level'" == "all" {
					coefplot 	(all_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(all_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(all_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("All Students") ///
								||  ///
								(mal_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(mal_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(mal_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("Boys") ///
								||  ///
								(fem_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(fem_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(fem_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("Girls") ///
								||  ///
								(young_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(young_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(young_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("`young_lab'") ///
								||  ///
								(old_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(old_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(old_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("`old_lab'") ///
								||  ///
								(g1_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g1_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g1_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("1st grade") ///	
								|| ///
								(g2_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g2_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g2_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("2nd grade") ///		
								|| ///
								(g3_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g3_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g3_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								,  ///
								bylabel("3rd grade") ///		
								|| ///
								(g4_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g4_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g4_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("4th grade") ///		
								|| ///
								(g5_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g5_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g5_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("5th grade") ///		
								|| ///
								(g6_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g6_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g6_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("6th grade") ///		
								|| ///
								(g7_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g7_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g7_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("7th grade") ///		
								|| ///
								(g8_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g8_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g8_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("8th grade") ///		
								|| ///
								(g9_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g9_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g9_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("9th grade") ///		
								|| ///
								(g10_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g10_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g10_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("10th grade") ///
								|| ///
								(g11_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g11_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g11_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("11th grade") ///	
								||  ///
								, ///
								keep(treated_post) ///
								legend(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'") col(3) pos(6)) ///
								xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
								///xlabel(`xmin'(0.02)0.02) ///
								xlabel(#5) ///								
								xline(0, lcolor(gs12)) ///
								///xline(`xlines', lcolor(gs15))  ///
								grid(none) ///
								bycoefs	
						}
						
				if "`level'" == "elm" {
					coefplot 	(all_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(all_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(all_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("All Students") ///
								||  ///
								(mal_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(mal_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(mal_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("Boys") ///
								||  ///
								(fem_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(fem_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(fem_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("Girls") ///
								||  ///
								(young_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(young_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(young_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("`young_lab'") ///
								||  ///
								(old_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(old_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(old_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("`old_lab'") ///
								||  ///
								(g1_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g1_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g1_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("1st grade") ///	
								|| ///
								(g2_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g2_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g2_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("2nd grade") ///		
								|| ///
								(g3_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g3_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g3_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								,  ///
								bylabel("3rd grade") ///		
								|| ///
								(g4_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g4_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g4_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("4th grade") ///		
								|| ///
								(g5_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g5_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g5_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("5th grade") ///		
								|| ///
								(g6_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g6_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g6_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("6th grade") ///		
								||  ///
								, ///
								keep(treated_post) ///
								legend(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'") col(3) pos(6)) ///
								xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
								///xlabel(`xmin'(0.02)0.02) ///
								xlabel(#5) ///								
								xline(0, lcolor(gs12)) ///
								///xline(`xlines', lcolor(gs15))  ///
								grid(none) ///
								bycoefs	
						}
						
				if "`level'" == "sec" {
					coefplot 	(all_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(all_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(all_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("All Students") ///
								||  ///
								(mal_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(mal_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(mal_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("Boys") ///
								||  ///
								(fem_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(fem_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(fem_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("Girls") ///
								||  ///
								(young_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(young_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(young_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("`young_lab'") ///
								||  ///
								(old_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(old_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(old_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("`old_lab'") ///	
								|| ///
								(g7_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g7_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g7_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("7th grade") ///		
								|| ///
								(g8_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g8_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g8_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("8th grade") ///		
								|| ///
								(g9_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g9_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g9_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("9th grade") ///		
								|| ///
								(g10_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g10_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g10_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("10th grade") ///
								|| ///
								(g11_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g11_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g11_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("11th grade") ///	
								||  ///
								, ///
								keep(treated_post) ///
								legend(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'") col(3) pos(6)) ///
								xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
								///xlabel(`xmin'(0.02)0.02) ///
								xlabel(#5) ///								
								xline(0, lcolor(gs12)) ///
								///xline(`xlines', lcolor(gs15))  ///
								grid(none) ///
								bycoefs	
						}						
				
						
				//graph save "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.gph" , replace	
				//capture qui graph export "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.eps", replace	
				if "${covid_data}" == "_TEST" {
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_B_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_B_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}
				if "${covid_data}" == "" {
					capture qui graph export "$FIGURES\TWFE\covid_twfe_B_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES\TWFE\covid_twfe_B_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}	
						
			}
		}
	}

end


***********************************************


capture program drop twfe_C
program define twfe_C
		
args treatment_type subsample       //treatment_type: treatment type (generally by # of siblings). 

di "TWFE: C"

				
capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"				

	clear

	*- TWFE Estimates
	foreach v in /*"std_gpa_m" "std_gpa_c"*/ "std_gpa_m_adj" "std_gpa_c_adj" "pass_math" "pass_read" "prim_on_time" "higher_ed_parent" /*"approved" "approved_first"*/ {
		foreach only_covid in "all" "20_21"  {
			foreach level in "all" "elm" "sec" {
						
			if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
			if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
			if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue
			
			estimates clear
			global x = "$x_all"
			if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
			

			use ///
			/*OUTCOME*/		`v'  ///
			/*ID*/ 			id_ie id_per_umc year grade ///
			/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
			/*DID*/			treated post treated_post ///
			/*EVENT*/		year_t_?? ///
			/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
			/*A*/ 			min_socioec_index_ie_cat /*OTHER IN DEMOG*/ ///
			/*B*/			/*GRADE AND MALE*/ ///
			/*C*/			closest_age_gap* ///
			/*D*/			///educ_cat_mother higher_ed_parent lives_with_mother lives_with_father ///
			/*Other*/		/**has_internet *has_comp *low_ses *quiet_room*/ ///
			using "$TEMP\pre_reg_covid${covid_data}", clear
			
			*- School has internet
			merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)

			
			if "`treatment_type'"=="internet" {
				drop treated treated_post
				gen treated = internet==1
				gen treated_post = treated*post
				local lab_control = "No Internet"
				local lab_treated = "Internet"
			}	

			if "`treatment_type'"=="parent_ed" {
				drop treated treated_post
				gen treated = (educ_cat_mother==3)
				gen treated_post = treated*post
				local lab_control = "Mother no higher ed."
				local lab_treated = "Mother some higher ed."
			}

			if "`treatment_type'"=="both_parents" {
				drop treated treated_post
				gen treated = (lives_with_mother==1 & lives_with_father==1)
				gen treated_post = treated*post
				local lab_control = "Does not live with both"
				local lab_treated = "Lives with both parents"
			}	
			
				if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
				if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
				if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
				if "`subsample'" == "all" 		di "All siblings"		
		
			
						
			*- Remove early grades and years
			keep if year>=2016
			drop if grade==0
			
			*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
			if "`only_covid'" == "20_21" keep if year<=2021
						
			*- Divide sample based on grade in 2020
			//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
			
			*- Divide sample based on expected cohort
			bys id_per_umc: egen min_year 		= min(year)
			bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
			gen proxy_1st = min_year - grade_min_year  + 1
							
			
			/*
			*- Not enough pre-years
						
			drop if inlist(grade_2020,1,2)==1
			drop if grade_2020==3 & year<=2017 //<=2017 Would only include those who repeated..
			drop if grade_2020==4 & year<=2016 //<=2016 Would only include those who repeated..
			keep if proxy_1st <= 2018
			*/
			
			
			/*
			if "`area'" == "rur" keep if urban_siagie == 0
			if "`area'" == "urb" keep if urban_siagie == 1

			if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
			if "`hed_parent'" == "yes" 	keep if higher_ed_parent == 1
			*/
			
			if "`level'" == "all" {
				keep if grade>=1 & grade<=11
				//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
				gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
				local young_lab = "Primary" //Primary in 2020
				local old_lab 	= "Secondary"
				}
			if "`level'" == "elm" {
				keep if grade>=1 & grade<=6
				//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
				//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
				//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
				//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
				gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
				local young_lab = "1st-3rd grade"
				local old_lab 	= "4th-6th grade"
				}
			if "`level'" == "sec" {
				keep if grade>=7	
				//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
				//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
				//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
				gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
				local young_lab = "7th-8th grade"
				local old_lab 	= "9th-11th grade"
				}


				local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				if "`v'" == "std_gpa_m" 		{
					local vlab = "gpa_m"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c" 		{
					local vlab = "gpa_c"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "std_gpa_m_adj" 		{
					local vlab = "gpa_m_adj"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c_adj" 		{
					local vlab = "gpa_c_adj"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "pass_math" 		{
					local vlab = "pass_m"
					local xtitle = "% A's Mathematics"
					}
				if "`v'" == "pass_read" 		{
					local vlab = "pass_c"
					local xtitle = "% A's Reading"
					}
				if "`v'" == "approved" 		{
					local vlab = "pass"
					local xtitle = "Grade Promotion"
					}
				if "`v'" == "approved_first" 		{
					local vlab = "passf"
					local xtitle = "Grade Promotion without recovery"
					}
				if "`v'" == "higher_ed_parent" 		{
					local vlab = "hed_parent"
					local xtitle = "% Parent with higher education"
					}
	
			* All students
			di as result "*******" _n as text "All" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 , a(grade year id_ie)
			estimates store all_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 , a(grade year id_ie)
			estimates store all_`vlab'_2
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1  , a(grade year id_ie)
			estimates store all_`vlab'_3
			if ${max_sibs} == 4 eststo all_`vlab'_4: reghdfe `v' 		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1  , a(grade year id_ie)
			
			*****
			* Panel C: Mechanisms - Family structure - Siblings
			*****

			
			*- Birth Order
			di as result "*******" _n as text "Oldest" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & inlist(fam_order_${fam_type},1)==1 , a(grade year id_ie)
			estimates store first_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & inlist(fam_order_${fam_type},1)==1 , a(grade year id_ie)
			estimates store first_`vlab'_2
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & inlist(fam_order_${fam_type},1)==1  , a(grade year id_ie)
			estimates store first_`vlab'_3
			if ${max_sibs} == 4 eststo first_`vlab'_4: reghdfe `v' 		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & inlist(fam_order_${fam_type},1)==1  , a(grade year id_ie)
			
			di as result "*******" _n as text "Middle" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) , a(grade year id_ie)
			estimates store mid_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) , a(grade year id_ie)
			estimates store mid_`vlab'_2
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type}))  , a(grade year id_ie)
			estimates store mid_`vlab'_3
			if ${max_sibs} == 4 eststo mid_`vlab'_4: reghdfe `v' 		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) , a(grade year id_ie)			
			
			di as result "*******" _n as text "Youngest" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & fam_order_${fam_type}==fam_total_${fam_type} , a(grade year id_ie)
			estimates store last_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & fam_order_${fam_type}==fam_total_${fam_type} , a(grade year id_ie)
			estimates store last_`vlab'_2
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & fam_order_${fam_type}==fam_total_${fam_type}  , a(grade year id_ie)
			estimates store last_`vlab'_3
			if ${max_sibs} == 4 eststo last_`vlab'_4: reghdfe `v' 		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & fam_order_${fam_type}==fam_total_${fam_type}  , a(grade year id_ie)		
			
			*- Gap <=2
			di as result "*******" _n as text "Close Age sibling (<=2 year difference)" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & ((closest_age_gap_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store g02_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & ((closest_age_gap_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store g02_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((closest_age_gap_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			estimates store g02_`vlab'_3
			if ${max_sibs} == 4 eststo g02_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((closest_age_gap_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			/*
			*- Gap 3-5
			di as result "*******" _n as text "Close Age sibling (3-5 year difference)" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & ((closest_age_gap_2>=3 & closest_age_gap_2<=5 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store g35_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & ((closest_age_gap_2>=3 & closest_age_gap_2<=5 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store g35_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((closest_age_gap_2>=3 & closest_age_gap_2<=5 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			estimates store g35_`vlab'_3
			if ${max_sibs} == 4 eststo g35_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((closest_age_gap_2>=3 & closest_age_gap_2<=5 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			*/
			*- Gap 6+
			di as result "*******" _n as text "Close Age sibling (>=6 year difference)" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & ((closest_age_gap_2>=6 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store g6m_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & ((closest_age_gap_2>=6 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store g6m_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((closest_age_gap_2>=6 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			estimates store g6m_`vlab'_3
			if ${max_sibs} == 4 eststo g6m_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((closest_age_gap_2>=6 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
					
			*- Younger Gap <=2
			di as result "*******" _n as text "Younger sibling within 2 years" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & ((closest_age_gap_younger<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store y02_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & ((closest_age_gap_younger<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store y02_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((closest_age_gap_younger<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			estimates store y02_`vlab'_3
			if ${max_sibs} == 4 eststo y02_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((closest_age_gap_younger<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			
			*- Same sex Gap <=2
			di as result "*******" _n as text "Same sex sibling within 2 years" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & ((closest_age_gap_samesex_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store s02_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & ((closest_age_gap_samesex_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store s02_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((closest_age_gap_samesex_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			estimates store s02_`vlab'_3
			if ${max_sibs} == 4 eststo s02_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((closest_age_gap_samesex_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)

			/*
			*- Male gap <=2
			di as result "*******" _n as text "Male sibling within 2 years" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & ((closest_age_gap_male_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store m02_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & ((closest_age_gap_male_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store m02_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((closest_age_gap_male_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			estimates store m02_`vlab'_3
			if ${max_sibs} == 4 eststo m02_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((closest_age_gap_male_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			
			*- Female gap <=2
			di as result "*******" _n as text "Female sibling within 3 years" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & ((closest_age_gap_female_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store f02_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & ((closest_age_gap_female_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
			estimates store f02_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((closest_age_gap_female_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			estimates store f02_`vlab'_3
			if ${max_sibs} == 4 eststo f02_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((closest_age_gap_female_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
			*/

			if ${max_sibs}==4 local legend_child_${max_sibs} = "4 children"	
			if ${max_sibs}==4 local legend_sib_${max_sibs} = "3 siblings"	
	
				
				if inlist("`v'","std_gpa_m","std_gpa_c","std_gpa_m_adj","std_gpa_c_adj")==1 {
					local xmin = -0.1
					local xlines = "-.1 -.08 -.06 -.04 -.02 .02"
				}
				if inlist("`v'","pass_math","pass_read","approved", "approved_first")==1 {
					local xmin = -0.04
					local xlines = "-.04 -.02 .02"
				}
				
				if inlist("`v'","higher_ed_parent")==1 {
					local xmin = -0.02
					local xlines = "-.02 0 .02"
				}
				 
				 
				foreach num_sibs in "" "_2" "_3" "_4" {
					if "`num_sibs'" == "" 	global twfe_color = "black"
					if "`num_sibs'" == "_2" global twfe_color = "${ek_blue}"
					if "`num_sibs'" == "_3" global twfe_color = "${ek_green}"
					if "`num_sibs'" == "_4" global twfe_color = "${ek_red}"					
					*Only main TWFE 
					coefplot 	(all_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${ek_blue}"))) ///
								, ///
								bylabel("All Students") ///
								||  ///
								(first_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Oldest child") ///
								||  ///
								(mid_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Middle child") ///
								||  ///
								(last_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Youngest child") ///
								||  ///
								(g02_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Closest Sibling within 0-2 years") ///
								||  ///
								(g6m_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Closest Sibling 6 or more years") ///
								||  ///
								(y02_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Younger sibling within 0-2 years") ///
								||  ///
								(s02_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
								, ///
								bylabel("Same sex sibling within 0-2 years") ///
								||  ///
								, ///
								keep(treated_post) ///
								xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
								///xlabel(`xmin'(0.02)0.02) ///
								xlabel(#5) ///								
								xline(0, lcolor(gs12)) ///
								///xline(`xlines', lcolor(gs15))  ///
								grid(none) ///
								bycoefs	
					
							
					*- All TWFE by # of siblings	
					if "${covid_data}" == "_TEST" {
						capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_C_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_C_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
						}
					if "${covid_data}" == "" {
						capture qui graph export "$FIGURES\TWFE\covid_twfe_C_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES\TWFE\covid_twfe_C_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
						}	
					
				}
				 
				coefplot 	(all_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(all_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(all_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("All Students") ///
							||  ///
							(first_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(first_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(first_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Oldest child") ///
							||  ///
							(mid_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(mid_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(mid_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Middle child") ///
							||  ///
							(last_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(last_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(last_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Youngest child") ///
							||  ///
							(g02_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(g02_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(g02_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Closest Sibling within 0-2 years") ///
							||  ///
							(g6m_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(g6m_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(g6m_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Closest Sibling 6 or more years") ///
							||  ///
							(y02_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(y02_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(y02_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Younger sibling within 0-2 years") ///
							||  ///
							(s02_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(s02_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(s02_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Same sex sibling within 0-2 years") ///
							||  ///
							, ///
							keep(treated_post) ///
							legend(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'") col(3) pos(6)) ///
							xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
							///xlabel(`xmin'(0.02)0.02) ///
							xlabel(#5) ///								
							xline(0, lcolor(gs12)) ///
							///xline(`xlines', lcolor(gs15))  ///
							grid(none) ///
							bycoefs	
				
						
				//graph save "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.gph" , replace	
				//capture qui graph export "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.eps", replace	
				if "${covid_data}" == "_TEST" {
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_C_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_C_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}
				if "${covid_data}" == "" {
					capture qui graph export "$FIGURES\TWFE\covid_twfe_C_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES\TWFE\covid_twfe_C_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}	
						
		
			
		}
	}
}

end



***********************************************
capture program drop twfe_D
program define twfe_D
		
args treatment_type subsample       //treatment_type: treatment type (generally by # of siblings). 
	
di "TWFE: D"

				
capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"				

	clear

	*- TWFE Estimates
	foreach v in /*"std_gpa_m" "std_gpa_c"*/ "std_gpa_m_adj" "std_gpa_c_adj" "pass_math" "pass_read" "prim_on_time" "higher_ed_parent" /*"approved" "approved_first"*/ {
		foreach only_covid in "all" "20_21"  {
			foreach level in "all" "elm" "sec" {
						
			if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
			if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
			if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue
			
			estimates clear
			global x = "$x_all"
			if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
			

			use ///
			/*OUTCOME*/		`v'  ///
			/*ID*/ 			id_ie id_per_umc year grade ///
			/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
			/*DID*/			treated post treated_post ///
			/*EVENT*/		year_t_?? ///
			/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
			/*A*/ 			min_socioec_index_ie_cat /*OTHER IN DEMOG*/ ///
			/*B*/			/*GRADE AND MALE*/ ///
			/*C*/			///closest_age_gap* ///
			/*D*/			educ_cat_mother higher_ed_parent lives_with_mother lives_with_father ///
			/*Other*/		/**has_internet *has_comp *low_ses *quiet_room*/ ///
			using "$TEMP\pre_reg_covid${covid_data}", clear
			
			*- School has internet
			merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)

			
			if "`treatment_type'"=="internet" {
				drop treated treated_post
				gen treated = internet==1
				gen treated_post = treated*post
				local lab_control = "No Internet"
				local lab_treated = "Internet"
			}	

			if "`treatment_type'"=="parent_ed" {
				drop treated treated_post
				gen treated = (educ_cat_mother==3)
				gen treated_post = treated*post
				local lab_control = "Mother no higher ed."
				local lab_treated = "Mother some higher ed."
			}

			if "`treatment_type'"=="both_parents" {
				drop treated treated_post
				gen treated = (lives_with_mother==1 & lives_with_father==1)
				gen treated_post = treated*post
				local lab_control = "Does not live with both"
				local lab_treated = "Lives with both parents"
			}	
			
				if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
				if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
				if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
				if "`subsample'" == "all" 		di "All siblings"		
		
			
			
			*- Remove early grades and years
			keep if year>=2016
			drop if grade==0
			
			*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
			if "`only_covid'" == "20_21" keep if year<=2021
			
			*- Divide sample based on grade in 2020
			//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
			
			*- Divide sample based on expected cohort
			bys id_per_umc: egen min_year 		= min(year)
			bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
			gen proxy_1st = min_year - grade_min_year  + 1
							
			
			/*
			*- Not enough pre-years
						
			drop if inlist(grade_2020,1,2)==1
			drop if grade_2020==3 & year<=2017 //<=2017 Would only include those who repeated..
			drop if grade_2020==4 & year<=2016 //<=2016 Would only include those who repeated..
			keep if proxy_1st <= 2018
			*/
			
			
			/*
			if "`area'" == "rur" keep if urban_siagie == 0
			if "`area'" == "urb" keep if urban_siagie == 1

			if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
			if "`hed_parent'" == "yes" 	keep if higher_ed_parent == 1
			*/
			
			if "`level'" == "all" {
				keep if grade>=1 & grade<=11
				//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
				gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
				local young_lab = "Primary" //Primary in 2020
				local old_lab 	= "Secondary"
				}
			if "`level'" == "elm" {
				keep if grade>=1 & grade<=6
				//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
				//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
				//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
				//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
				gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
				local young_lab = "1st-3rd grade"
				local old_lab 	= "4th-6th grade"
				}
			if "`level'" == "sec" {
				keep if grade>=7	
				//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
				//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
				//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
				gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
				local young_lab = "7th-8th grade"
				local old_lab 	= "9th-11th grade"
				}


				local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				if "`v'" == "std_gpa_m" 		{
					local vlab = "gpa_m"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c" 		{
					local vlab = "gpa_c"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "std_gpa_m_adj" 		{
					local vlab = "gpa_m_adj"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c_adj" 		{
					local vlab = "gpa_c_adj"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "pass_math" 		{
					local vlab = "pass_m"
					local xtitle = "% A's Mathematics"
					}
				if "`v'" == "pass_read" 		{
					local vlab = "pass_c"
					local xtitle = "% A's Reading"
					}
				if "`v'" == "approved" 		{
					local vlab = "pass"
					local xtitle = "Grade Promotion"
					}
				if "`v'" == "approved_first" 		{
					local vlab = "passf"
					local xtitle = "Grade Promotion without recovery"
					}
				if "`v'" == "higher_ed_parent" 		{
					local vlab = "hed_parent"
					local xtitle = "% Parent with higher education"
					}
	
			* All students
			di as result "*******" _n as text "All" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 , a(grade year id_ie)
			estimates store all_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 , a(grade year id_ie)
			estimates store all_`vlab'_2
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1  , a(grade year id_ie)
			estimates store all_`vlab'_3
			if ${max_sibs} == 4 eststo all_`vlab'_4: reghdfe `v' 		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1  , a(grade year id_ie)
			
			
			
			*****
			* Panel B: Mechanisms
			*****
			
			*- Parents Have some level of higher education
			/*
			di as result "*******" _n as text "Some Higher Ed" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & higher_ed_parent==1 , a(grade year id_ie)
			estimates store yhed_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & higher_ed_parent==1 , a(grade year id_ie)
			estimates store yhed_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & higher_ed_parent==1  , a(grade year id_ie)
			estimates store yhed_`vlab'_3
			if ${max_sibs} == 4 eststo yhed_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & higher_ed_parent==1  , a(grade year id_ie)
			
			di as result "*******" _n as text "No Higher ed" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & higher_ed_parent==0 , a(grade year id_ie)
			estimates store nhed_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & higher_ed_parent==0 , a(grade year id_ie)
			estimates store nhed_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & higher_ed_parent==0  , a(grade year id_ie)
			estimates store nhed_`vlab'_3
			if ${max_sibs} == 4 eststo nhed_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & higher_ed_parent==0  , a(grade year id_ie)
			*/
			*- Mother's education
			di as result "*******" _n as text "Incomplete Secondary" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & educ_cat_mother==1 , a(grade year id_ie)
			estimates store edu1_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & educ_cat_mother==1 , a(grade year id_ie)
			estimates store edu1_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & educ_cat_mother==1  , a(grade year id_ie)
			estimates store edu1_`vlab'_3
			if ${max_sibs} == 4 eststo edu1_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & educ_cat_mother==1  , a(grade year id_ie)
			
			di as result "*******" _n as text "Completed Secondary" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & educ_cat_mother==2 , a(grade year id_ie)
			estimates store edu2_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & educ_cat_mother==2 , a(grade year id_ie)
			estimates store edu2_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & educ_cat_mother==2  , a(grade year id_ie)
			estimates store edu2_`vlab'_3
			if ${max_sibs} == 4 eststo edu2_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & educ_cat_mother==2  , a(grade year id_ie)
			
			di as result "*******" _n as text "Some level of higher education" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & educ_cat_mother==3 , a(grade year id_ie)
			estimates store edu3_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & educ_cat_mother==3 , a(grade year id_ie)
			estimates store edu3_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & educ_cat_mother==3  , a(grade year id_ie)
			estimates store edu3_`vlab'_3
			if ${max_sibs} == 4 eststo edu3_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & educ_cat_mother==3  , a(grade year id_ie)
			
			*- Lives with parents
			di as result "*******" _n as text "Lives with both parents" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & (lives_with_mother==1 & lives_with_father==1) , a(grade year id_ie)
			estimates store both_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & (lives_with_mother==1 & lives_with_father==1) , a(grade year id_ie)
			estimates store both_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & (lives_with_mother==1 & lives_with_father==1) , a(grade year id_ie)
			estimates store both_`vlab'_3
			if ${max_sibs} == 4 eststo both_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & (lives_with_mother==1 & lives_with_father==1)  , a(grade year id_ie)
			
			di as result "*******" _n as text "Only lives with one parent" _n as result 
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 &  ((lives_with_mother==1 & lives_with_father==0) | (lives_with_mother==0 & lives_with_father==1)) , a(grade year id_ie)
			estimates store one_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 &  ((lives_with_mother==1 & lives_with_father==0) | (lives_with_mother==0 & lives_with_father==1)) , a(grade year id_ie)
			estimates store one_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((lives_with_mother==1 & lives_with_father==0) | (lives_with_mother==0 & lives_with_father==1))   , a(grade year id_ie)
			estimates store one_`vlab'_3
			if ${max_sibs} == 4 eststo one_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((lives_with_mother==1 & lives_with_father==0) | (lives_with_mother==0 & lives_with_father==1))   , a(grade year id_ie)
			
			di as result "*******" _n as text "Doesn't live with parents" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & (lives_with_mother==0 & lives_with_father==0) , a(grade year id_ie)
			estimates store none_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & (lives_with_mother==0 & lives_with_father==0) , a(grade year id_ie)
			estimates store none_`vlab'_2
			reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & (lives_with_mother==0 & lives_with_father==0) , a(grade year id_ie)
			estimates store none_`vlab'_3
			if ${max_sibs} == 4 eststo none_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & (lives_with_mother==0 & lives_with_father==0)  , a(grade year id_ie)


			
			
			if ${max_sibs}==4 local legend_child_${max_sibs} = "4 children"	
			if ${max_sibs}==4 local legend_sib_${max_sibs} = "3 siblings"	
			
			
				
				if inlist("`v'","std_gpa_m","std_gpa_c","std_gpa_m_adj","std_gpa_c_adj")==1 {
					local xmin = -0.1
					local xlines = "-.1 -.08 -.06 -.04 -.02 .02"
				}
				if inlist("`v'","pass_math","pass_read","approved", "approved_first")==1 {
					local xmin = -0.04
					local xlines = "-.04 -.02 .02"
				}
				
				if inlist("`v'","higher_ed_parent")==1 {
					local xmin = -0.02
					local xlines = "-.02 0 .02"
				}
				 
					
					
				foreach num_sibs in "" "_2" "_3" "_4" {
					if "`num_sibs'" == "" 	global twfe_color = "black"
					if "`num_sibs'" == "_2" global twfe_color = "${ek_blue}"
					if "`num_sibs'" == "_3" global twfe_color = "${ek_green}"
					if "`num_sibs'" == "_4" global twfe_color = "${ek_red}"				
					
					*Only main TWFE 
				coefplot 	(all_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
							, ///
							bylabel("All Students") ///
							||  ///
							(edu1_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
							, ///
							bylabel("Mother did not complete Secondary") ///
							||  ///
							(edu2_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
							, ///
							bylabel("Mother completed Secondary") ///
							||  ///
							(edu3_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
							, ///
							bylabel("Mother with some level" "of Higher ed.") ///
							||  ///
							(both_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
							, ///
							bylabel("Lives with both parents") ///
							||  ///
							(one_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
							, ///
							bylabel("Lives with one parent") ///
							||  ///
							(none_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
							, ///
							bylabel("Does not live with parents") ///
							||  ///
							, ///
							keep(treated_post) ///
							xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
							///xlabel(`xmin'(0.02)0.02) ///
							xlabel(#5) ///								
							xline(0, lcolor(gs12)) ///
							///xline(`xlines', lcolor(gs15))  ///
							grid(none) ///
							bycoefs	
				
						
				*- All TWFE by # of siblings	
				if "${covid_data}" == "_TEST" {
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_D_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_D_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}
				if "${covid_data}" == "" {
					capture qui graph export "$FIGURES\TWFE\covid_twfe_D_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES\TWFE\covid_twfe_D_`level'_`only_covid'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}	 
				}
				coefplot 	(all_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(all_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(all_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("All Students") ///
							||  ///
							///(urb_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							///(urb_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							///(urb_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							///, ///
							///bylabel("Urban") ///
							///||  ///
							(edu1_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(edu1_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(edu1_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Mother did not complete Secondary") ///
							||  ///
							(edu2_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(edu2_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(edu2_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Mother completed Secondary") ///
							||  ///
							(edu3_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(edu3_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(edu3_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Mother with some level" "of Higher ed.") ///
							||  ///
							(both_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(both_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(both_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Lives with both parents") ///
							||  ///
							(one_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(one_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(one_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Lives with one parent") ///
							|| ///
							(none_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
							(none_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
							(none_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
							, ///
							bylabel("Does not live with parents") ///
							||  ///
							, ///
							keep(treated_post) ///
							legend(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'") col(3) pos(6)) ///
							xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
							///xlabel(`xmin'(0.02)0.02) ///
							xlabel(#5) ///								
							xline(0, lcolor(gs12)) ///
							///xline(`xlines', lcolor(gs15))  ///
							grid(none) ///
							bycoefs	
				
						
				//graph save "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.gph" , replace	
				//capture qui graph export "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.eps", replace	
				if "${covid_data}" == "_TEST" {
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_D_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_D_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}
				if "${covid_data}" == "" {
					capture qui graph export "$FIGURES\TWFE\covid_twfe_D_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES\TWFE\covid_twfe_D_bysibs_`level'_`only_covid'_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}	
			
			}
		}
	}

end




capture program drop twfe_age_sibling
program define twfe_age_sibling
		
args treatment_type subsample age_sibling       //treatment_type: treatment type (generally by # of siblings). 

di "TWFE: age_siblings"

				
capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"				

	clear

	*- TWFE Estimates
	foreach v in /*"std_gpa_m" "std_gpa_c"*/ "std_gpa_m_adj" /*"std_gpa_c_adj" "pass_math" "pass_read" "prim_on_time" "higher_ed_parent"*/ /*"approved" "approved_first"*/ {
		foreach only_covid in "all" /*"20_21"*/  {
			foreach level in "all" /*"elm" "sec"*/ {
						
			if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
			if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
			if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue
			
			estimates clear
			global x = "$x_all"
			if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
			

			use ///
			/*OUTCOME*/		`v'  ///
			/*ID*/ 			id_ie id_per_umc year grade ///
			/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
			/*DID*/			treated post treated_post ///
			/*EVENT*/		year_t_?? ///
			/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
			/*A*/ 			min_socioec_index_ie_cat /*OTHER IN DEMOG*/ ///
			/*B*/			/*GRADE AND MALE*/ ///
			/*C*/			///closest_age_gap* ///
			/*D*/			///educ_cat_mother higher_ed_parent lives_with_mother lives_with_father ///
			/*Other*/		/**has_internet *has_comp *low_ses *quiet_room*/ ///
			using "$TEMP\pre_reg_covid${covid_data}", clear
			
			*- School has internet
			merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)

			
			if "`treatment_type'"=="internet" {
				drop treated treated_post
				gen treated = internet==1
				gen treated_post = treated*post
				local lab_control = "No Internet"
				local lab_treated = "Internet"
			}	

			if "`treatment_type'"=="parent_ed" {
				drop treated treated_post
				gen treated = (educ_cat_mother==3)
				gen treated_post = treated*post
				local lab_control = "Mother no higher ed."
				local lab_treated = "Mother some higher ed."
			}

			if "`treatment_type'"=="both_parents" {
				drop treated treated_post
				gen treated = (lives_with_mother==1 & lives_with_father==1)
				gen treated_post = treated*post
				local lab_control = "Does not live with both"
				local lab_treated = "Lives with both parents"
			}	
			
		
			*- Age of oldest (proxy)
			preserve
				use "$TEMP\id_siblings", clear
				bys id_fam_${fam_type}: egen exp_entry_year_oldest = max(cond(fam_order_${fam_type}==1,exp_entry_year,.))
				bys id_fam_${fam_type}: egen exp_entry_year_youngest = max(cond(fam_order_${fam_type}==fam_total_${fam_type},exp_entry_year,.))
				keep id_fam_${fam_type} id_per_umc exp_entry_year_oldest exp_entry_year_youngest
				tempfile exp_entry_year_siblings
				save `exp_entry_year_siblings', replace
			restore
			
			merge m:1 id_per_umc using `exp_entry_year_siblings', keepusing(id_fam_${fam_type} exp_entry_year_oldest exp_entry_year_youngest) keep(master match) nogen
			//bys id_fam_${fam_type}: egen exp_entry_year_oldest = max(cond(fam_order_${fam_type}==1,exp_entry_year,.))
			gen age_oldest 		= year - exp_entry_year_oldest + 6
			gen age_youngest 	= year - exp_entry_year_youngest + 6
			
			*- We define if subsamples will be based on age of oldest or youngest sibling.
			if "`age_sibling'" == "age_oldest" 		rename age_oldest 	age_sibling 
			if "`age_sibling'" == "age_oldest"		keep if year>=2018 & year<=2020 //Becacause before 2018 there are no 20y.o siblings. The <=2021 is to make it more comparable with "age_youngest"
			if "`age_sibling'" == "age_youngest" 	rename age_youngest age_sibling
			if "`age_sibling'" == "age_youngest"	keep if year<=2020 //Because age = -1 only up to 2020. We could also do 2020-2021 since age 0.
		
			if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
			if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
			if "`subsample'" == "second" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}==2)) //famsize=1 or famsize>1 and not older or younger
			if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
			if "`subsample'" == "all" 		di "All siblings"				
			
			*- Remove early grades and years
			keep if year>=2016
			drop if grade==0
			
			*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
			if "`only_covid'" == "20_21" keep if year<=2021
						
			*- Divide sample based on expected cohort
			bys id_per_umc: egen min_year 		= min(year)
			bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
			gen proxy_1st = min_year - grade_min_year  + 1
						
			
			if "`level'" == "all" {
				keep if grade>=1 & grade<=11
				//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
				gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
				local young_lab = "Primary" //Primary in 2020
				local old_lab 	= "Secondary"
				}
			if "`level'" == "elm" {
				keep if grade>=1 & grade<=6
				//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
				//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
				//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
				//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
				gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
				local young_lab = "1st-3rd grade"
				local old_lab 	= "4th-6th grade"
				}
			if "`level'" == "sec" {
				keep if grade>=7	
				//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
				//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
				//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
				gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
				local young_lab = "7th-8th grade"
				local old_lab 	= "9th-11th grade"
				}
				

				local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				if "`v'" == "std_gpa_m" 		{
					local vlab = "gpa_m"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c" 		{
					local vlab = "gpa_c"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "std_gpa_m_adj" 		{
					local vlab = "gpa_m_adj"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c_adj" 		{
					local vlab = "gpa_c_adj"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "pass_math" 		{
					local vlab = "pass_m"
					local xtitle = "% A's Mathematics"
					}
				if "`v'" == "pass_read" 		{
					local vlab = "pass_c"
					local xtitle = "% A's Reading"
					}
				if "`v'" == "approved" 		{
					local vlab = "pass"
					local xtitle = "Grade Promotion"
					}
				if "`v'" == "approved_first" 		{
					local vlab = "passf"
					local xtitle = "Grade Promotion without recovery"
					}
				if "`v'" == "higher_ed_parent" 		{
					local vlab = "hed_parent"
					local xtitle = "% Parent with higher education"
					}
	
			* All students
			/*
			di as result "*******" _n as text "All" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & age_oldest==`age' , a(grade year id_ie)
			estimates store all_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & age_oldest==`age' , a(grade year id_ie)
			estimates store all_`vlab'_2
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & age_oldest==`age'  , a(grade year id_ie)
			estimates store all_`vlab'_3
			if ${max_sibs} == 4 eststo all_`vlab'_4: reghdfe `v' 		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & age_oldest==`age'  , a(grade year id_ie)
			*/
			
			//assert 1==0
			forvalues g = 1(1)6 {
				estimates clear
				forvalues age = -1(1)22 {
					di "****************" _n as text "**** AGE : `age' / GRADE:`g' *****" _n "**************"
					local label_g1 = "1st grade"
					local label_g2 = "2nd grade"
					local label_g3 = "3rd grade"
					local label_g4 = "4th grade"
					local label_g5 = "5th grade"
					local label_g6 = "6th grade"
					if `age' == -1 	local lab_age = "b1"
					if `age' >= 0 	local lab_age = "a`age'"
						preserve
							keep if grade==`g'
							keep if fam_total_${fam_type}==1 | (age_sibling==`age' & fam_total_${fam_type}>1)
							if `age'<=`g'+4 & "`age_sibling'" == "age_oldest" { //e.g. if grade = 3, then there shouldn't be an 'oldest' of 7 y.o. or less
								reghdfe `v' post //irrelevant regression, just to simplify code later when plotting
								//estimates store age`age'_`vlab'
								estimates store g`g'_`lab_age'_`vlab'_2
								estimates store g`g'_`lab_age'_`vlab'_3
								estimates store g`g'_`lab_age'_`vlab'_4
								restore
								continue 
							}
							
							if `age'>=`g'+5 & "`age_sibling'" == "age_youngest" {  //e.g. if grade = 3, then there shouldn't be an 'youngest' of 8 y.o. or more
								reghdfe `v' post //irrelevant regression, just to simplify code later when plotting
								//estimates store age`age'_`vlab'
								estimates store g`g'_`lab_age'_`vlab'_2
								estimates store g`g'_`lab_age'_`vlab'_3
								estimates store g`g'_`lab_age'_`vlab'_4
								restore
								continue
							}							
							//reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & ((age_oldest==`age' & fam_total_${fam_type}>1) | fam_total_${fam_type}==1)  , a(grade year id_ie)
							//estimates store age`age'_`vlab'
							reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1  , a(grade year id_ie)
							estimates store g`g'_`lab_age'_`vlab'_2
							reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1, a(grade year id_ie)
							estimates store g`g'_`lab_age'_`vlab'_3
							if ${max_sibs} == 4 {
								reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1, a(grade year id_ie)	
								estimates store g`g'_`lab_age'_`vlab'_4
							}
						restore
				}
			
					
			if ${max_sibs}==4 local legend_child_${max_sibs} = "4 children"	
			if ${max_sibs}==4 local legend_sib_${max_sibs} = "3 siblings"	
	
				
				if inlist("`v'","std_gpa_m","std_gpa_c","std_gpa_m_adj","std_gpa_c_adj")==1 {
					local xmin = -0.1
					local xlines = "-.1 -.08 -.06 -.04 -.02 .02"
				}
				if inlist("`v'","pass_math","pass_read","approved", "approved_first")==1 {
					local xmin = -0.04
					local xlines = "-.04 -.02 .02"
				}
				
				if inlist("`v'","higher_ed_parent")==1 {
					local xmin = -0.02
					local xlines = "-.02 0 .02"
				}
				 
				 
				 
				foreach num_sibs in /*""*/ "_2" "_3" "_4" {
					if "`num_sibs'" == "" 	global twfe_color = "black"
					if "`num_sibs'" == "_2" global twfe_color = "${ek_blue}"
					if "`num_sibs'" == "_3" global twfe_color = "${ek_green}"
					if "`num_sibs'" == "_4" global twfe_color = "${ek_red}"					
					*Only main TWFE 
				
						coefplot 	(g`g'_b1_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("-1 y.o.") ///	
									|| ///
									(g`g'_a0_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("0 y.o.") ///	
									|| ///(g`g'_a1_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									(g`g'_a1_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("1 y.o.") ///
									|| ///
									(g`g'_a2_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("2 y.o.") ///
									|| ///
									(g`g'_a3_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("3 y.o.") ///
									|| ///
									(g`g'_a4_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("4 y.o.") ///
									|| ///
									(g`g'_a5_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("5 y.o.") ///
									|| ///
									(g`g'_a6_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("6 y.o.") ///
									|| ///
									(g`g'_a7_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("7 y.o.") ///
									|| ///
									(g`g'_a8_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("8 y.o.") ///	
									|| ///
									(g`g'_a9_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("9 y.o.") ///		
									|| ///
									(g`g'_a10_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									,  ///
									bylabel("10 y.o.") ///		
									|| ///
									(g`g'_a11_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("11 y.o.") ///		
									|| ///
									(g`g'_a12_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("12 y.o.") ///		
									|| ///
									(g`g'_a13_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("13 y.o.") ///		
									|| ///
									(g`g'_a14_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("14 y.o.") ///		
									|| ///
									(g`g'_a15_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("15 y.o.") ///		
									|| ///
									(g`g'_a16_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("16 y.o.") ///		
									|| ///
									(g`g'_a17_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("17 y.o.") ///
									|| ///
									(g`g'_a18_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("18 y.o.") ///	
									|| ///
									(g`g'_a19_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("19 y.o.") ///
									|| ///
									(g`g'_a20_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("20 y.o.") ///
									|| ///
									(g`g'_a21_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("21 y.o.") ///
									|| ///
									(g`g'_a22_`vlab'`num_sibs', mcolor("${twfe_color}") ciopts(color("${twfe_color}"))) ///
									, ///
									bylabel("22 y.o.") ///
									||  ///
									, ///
									keep(treated_post) ///
									xtitle("`xtitle' relative to Only Children: `label_g`g'' grade", size(medsmall) height(5)) ///
									///xlabel(`xmin'(0.02)0.02) ///
									xlabel(#5) ///								
									xline(0, lcolor(gs12)) ///
									///xline(`xlines', lcolor(gs15))  ///
									grid(none) ///
									bycoefs	
					
									
							
					*- All TWFE by # of siblings	
					if "${covid_data}" == "_TEST" {
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_`age_sibling'_g`g'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_`age_sibling'_g`g'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
						}
					if "${covid_data}" == "" {
						capture qui graph export "$FIGURES\TWFE\twfe_`age_sibling'_g`g'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES\TWFE\twfe_`age_sibling'_g`g'_`vlab'_T`treatment_type'`num_sibs'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
						}	 
				 
				}
			}
				/*
					coefplot 	(all_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(all_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(all_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("All Students") ///
								||  ///
								(g1_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g1_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g1_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("1st grade") ///	
								|| ///
								(g2_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g2_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g2_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("2nd grade") ///		
								|| ///
								(g3_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g3_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g3_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								,  ///
								bylabel("3rd grade") ///		
								|| ///
								(g4_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g4_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g4_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("4th grade") ///		
								|| ///
								(g5_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g5_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g5_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("5th grade") ///		
								|| ///
								(g6_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g6_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g6_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("6th grade") ///		
								|| ///
								(g7_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g7_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g7_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("7th grade") ///		
								|| ///
								(g8_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g8_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g8_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("8th grade") ///		
								|| ///
								(g9_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g9_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g9_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("9th grade") ///		
								|| ///
								(g10_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g10_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g10_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("10th grade") ///
								|| ///
								(g11_`vlab'_2, mcolor("${ek_blue}") ciopts(color("${ek_blue}"))) ///
								(g11_`vlab'_3, mcolor("${ek_green}") ciopts(color("${ek_green}"))) ///
								(g11_`vlab'_4, mcolor("${ek_red}") ciopts(color("${ek_red}"))) ///
								, ///
								bylabel("11th grade") ///	
								||  ///
								, ///
								keep(treated_post) ///
								legend(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'") col(3) pos(6)) ///
								xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
								///xlabel(`xmin'(0.02)0.02) ///
								xlabel(#5) ///								
								xline(0, lcolor(gs12)) ///
								///xline(`xlines', lcolor(gs15))  ///
								grid(none) ///
								bycoefs	
						
				
				
						
				//graph save "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.gph" , replace	
				//capture qui graph export "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.eps", replace	
				if "${covid_data}" == "_TEST" {
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_age_oldest_bysibs_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_age_oldest_bysibs_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}
				if "${covid_data}" == "" {
					capture qui graph export "$FIGURES\TWFE\covid_twfe_age_oldest_bysibs_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES\TWFE\covid_twfe_age_oldest_bysibs_`vlab'_T`treatment_type'_S`subsample'_${max_sibs}${covid_data}.pdf", replace	
					}	
					*/
					*/	
					
				
					
			}
		}
	}
	
	*- To illustrate temporarily the age distribution of those '-1' in 2020
	if "`age_sibling'" == "age_youngest" {
		use "$TEMP\id_siblings", clear
		keep if inlist(exp_entry_year,2026,2027)==1
		gen age = ((mdy(3,31,2020) - dob_siagie) / 365.25)
		
		
		twoway (histogram age if abs(age)<3 & exp_entry_year==2027, lcolor("${ek_blue}%50") fcolor("${ek_blue}%10")) ///
			(pcarrowi 0.75 -0.2 0.75 -0.8, lcolor(black) mcolor(black) mlwidth(medium)) ///
			(pcarrowi 0.75 0.2 0.75 0.8, lcolor(black) mcolor(black) mlwidth(medium)), ///
			xline(0, lcolor(red) lwidth(medium)) ///
			xtitle("Age distribution of those considered age=-1") ///
			text(0.8 -0.5 "Born after" "school start", placement(c) size(medium)) ///
			text(0.8 0.5 "Born before" "school start", placement(c) size(medium)) ///
			xlabel(-3(1)3, nogrid) ///
			ylabel(, nogrid) ///
			legend(off) ///
			name(age_b1, replace)	
		
		twoway (histogram age if abs(age)<3 & exp_entry_year==2026, lcolor("${ek_blue}%50") fcolor("${ek_blue}%10")) ///
			(pcarrowi 0.75 -0.2 0.75 -0.8, lcolor(black) mcolor(black) mlwidth(medium)) ///
			(pcarrowi 0.75 0.2 0.75 0.8, lcolor(black) mcolor(black) mlwidth(medium)), ///
			xline(0, lcolor(red) lwidth(medium)) ///
			xtitle("Age distribution of those considered age=0") ///
			text(0.8 -0.5 "Born after" "school start", placement(c) size(medium)) ///
			text(0.8 0.5 "Born before" "school start", placement(c) size(medium)) ///
			xlabel(-3(1)3, nogrid) ///
			ylabel(, nogrid) ///
			legend(off) ///
			name(age_a0, replace)
			
		
			
		graph combine age_b1 age_a0, col(2) xsize(10) ysize(4)
		
		
		capture qui graph export "$FIGURES\Descriptives\age_birth_example_b0_a1.png", replace	
		capture qui graph export "$FIGURES\Descriptives\age_birth_example_b0_a1.pdf", replace
	}
		
	
end


capture program drop twfe_grades
program define twfe_grades	
		
args type
	
	clear

	*- TWFE Estimates

	foreach v in /*"std_gpa_m" "std_gpa_c"*/ "std_gpa_m_adj" "std_gpa_c_adj" "pass_math" "pass_read" /*"approved" "approved_first"*/ {
		foreach only_covid in "all" "20_21" {
			foreach level in "all" "elm" "sec" {
			
			if ${covid_test} == 1 & inlist("`v'","std_gpa_m_adj","pass_math")==0 	continue
			if ${covid_test} == 1 & inlist("`level'","sec")==1 						continue
			if ${covid_test} == 1 & inlist("`only_covid'","all")==1 				continue
			if inlist("`v'","std_gpa_c_adj","pass_read")==1 & "`level'"!="elm" 		continue //until final version, not needed.
			if inlist("`v'","std_gpa_c_adj","pass_read")==1 & "`only_covid'"!="all" continue //until final version, not needed.
			if inlist("`v'","prim_on_time")==1 				& "`only_covid'"=="all" continue //testing for now so no need to do it all	
			
			estimates clear
			global x = "$x_all"
			if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
			

			use `v' pass_math pass_read approved approved_first id_per_umc year_t_?? public_siagie urban_siagie male_siagie educ_cat_mother higher_ed_parent lives_with_mother lives_with_father *has_internet *has_comp *low_ses *quiet_room year grade treated post treated_post id_ie fam_order_${fam_type} fam_total_${fam_type} ${x} using "$TEMP\pre_reg_covid${covid_data}", clear
				
			*- School has internet
			merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)
					
			if "`type'"=="internet" {
				drop treated treated_post
				gen treated = internet==1
				gen treated_post = treated*post
				local lab_control = "No Internet"
				local lab_treated = "Internet"
			}	

			if "`type'"=="parent_ed" {
				drop treated treated_post
				gen treated = (educ_cat_mother==3)
				gen treated_post = treated*post
				local lab_control = "Mother no higher ed."
				local lab_treated = "Mother some higher ed."
			}

			if "`type'"=="both_parents" {
				drop treated treated_post
				gen treated = (lives_with_mother==1 & lives_with_father==1)
				gen treated_post = treated*post
				local lab_control = "Does not live with both"
				local lab_treated = "Lives with both parents"
			}				
			
			*- Remove early grades and years
			keep if year>=2016
			drop if grade==0
			
			*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
			if "`only_covid'" == "20_21" keep if year<=2021
			
			
			*- Divide sample based on grade in 2020
			//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
			
			*- Divide sample based on expected cohort
			bys id_per_umc: egen min_year 		= min(year)
			bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
			gen proxy_1st = min_year - grade_min_year  + 1
			
			if "`level'" == "all" {
				keep if grade>=1 & grade<=11
				//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
				gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
				local young_lab = "Primary" //Primary in 2020
				local old_lab 	= "Secondary"
				}
			if "`level'" == "elm" {
				keep if grade>=1 & grade<=6
				//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
				//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
				//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
				//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
				gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
				local young_lab = "1st-3rd grade"
				local old_lab 	= "4th-6th grade"
				}
			if "`level'" == "sec" {
				keep if grade>=7	
				//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
				//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
				//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
				gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
				local young_lab = "7th-8th grade"
				local old_lab 	= "9th-11th grade"
				}


				local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				if "`v'" == "std_gpa_m" 		{
					local vlab = "gpa_m"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c" 		{
					local vlab = "gpa_c"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "std_gpa_m_adj" 		{
					local vlab = "gpa_m_adj"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c_adj" 		{
					local vlab = "gpa_c_adj"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "pass_math" 		{
					local vlab = "pass_m"
					local xtitle = "% A's Mathematics"
					}
				if "`v'" == "pass_read" 		{
					local vlab = "pass_c"
					local xtitle = "% A's Reading"
					}
				if "`v'" == "approved" 		{
					local vlab = "pass"
					local xtitle = "Grade Promotion"
					}
				if "`v'" == "approved_first" 		{
					local vlab = "passf"
					local xtitle = "Grade Promotion without recovery"
					}
				if "`v'" == "higher_ed_parent" 		{
					local vlab = "hed_parent"
					local xtitle = "% Parent with higher education"
					}
	
			* All students
			di as result "*******" _n as text "All" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 , a(grade year id_ie)
			estimates store all_`vlab'
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 , a(grade year id_ie)
			estimates store all_`vlab'_2
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1  , a(grade year id_ie)
			estimates store all_`vlab'_3
			if ${max_sibs} == 4 eststo all_`vlab'_4: reghdfe `v' 		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1  , a(grade year id_ie)
				
			if "`level'" == "all" {
				forvalues g = 1(1)11 {
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==`g' , a(grade year id_ie)
				estimates store g`g'_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & grade==`g' , a(grade year id_ie)
				estimates store g`g'_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & grade==`g' , a(grade year id_ie)
				estimates store g`g'_`vlab'_3
				if ${max_sibs} == 4 eststo g`g'_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & grade==`g'  , a(grade year id_ie)	
				}
				
				if ${max_sibs}==4 local legend_child_${max_sibs} = "4 children"	
				if ${max_sibs}==4 local legend_sib_${max_sibs} = "3 siblings"
				
			if inlist("`v'","std_gpa_m","std_gpa_c","std_gpa_m_adj","std_gpa_c_adj")==1 {
				local xmin = -0.1
				local xlines = "-.1 -.08 -.06 -.04 -.02 .02"
			}
			if inlist("`v'","pass_math","pass_read")==1 {
				local xmin = -0.04
				local xlines = "-.04 -.02 .02"
			}				
				
			coefplot 	(all_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("All Students") ///
						|| ///
						(g1_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("1st grade") ///	
						|| ///
						(g2_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("2nd grade") ///		
						|| ///
						(g3_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						,  ///
						bylabel("3rd grade") ///		
						|| ///
						(g4_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("4th grade") ///		
						|| ///
						(g5_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("5th grade") ///		
						|| ///
						(g6_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("6th grade") ///		
						|| ///
						(g7_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("7th grade") ///		
						|| ///
						(g8_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("8th grade") ///		
						|| ///
						(g9_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("9th grade") ///		
						|| ///
						(g10_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("10th grade") ///
						|| ///
						(g11_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("11th grade") ///	
						||  ///
						, ///
						keep(treated_post) ///
						///legend(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'") col(3) pos(6)) ///
						xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
						///xlabel(`xmin'(0.02)0.02) ///
						xlabel(#5) ///								
						xline(0, lcolor(gs12)) ///
						///xline(`xlines', lcolor(gs15))  ///
						grid(none) ///
						bycoefs	
				
						
				//graph save "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.gph" , replace	
				//capture qui graph export "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.eps", replace	
				capture qui graph export "$FIGURES\TWFE\covid_twfe_grades_`vlab'_`type'_${max_sibs}${covid_data}.png", replace	
				capture qui graph export "$FIGURES\TWFE\covid_twfe_grades_`vlab'_`type'_${max_sibs}${covid_data}.pdf", replace			
				
				
			coefplot 	(all_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(all_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(all_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						, ///
						bylabel("All Students") ///
						|| ///
						(g1_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(g1_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(g1_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						, ///
						bylabel("1st grade") ///	
						|| ///
						(g2_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(g2_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(g2_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						, ///
						bylabel("2nd grade") ///		
						|| ///
						(g3_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(g3_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(g3_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						,  ///
						bylabel("3rd grade") ///		
						|| ///
						(g4_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(g4_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(g4_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						, ///
						bylabel("4th grade") ///		
						|| ///
						(g5_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(g5_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(g5_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						, ///
						bylabel("5th grade") ///		
						|| ///
						(g6_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(g6_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(g6_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						, ///
						bylabel("6th grade") ///		
						|| ///
						(g7_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(g7_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(g7_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						, ///
						bylabel("7th grade") ///		
						|| ///
						(g8_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(g8_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(g8_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						, ///
						bylabel("8th grade") ///		
						|| ///
						(g9_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(g9_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(g9_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						, ///
						bylabel("9th grade") ///		
						|| ///
						(g10_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(g10_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(g10_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						, ///
						bylabel("10th grade") ///
						|| ///
						(g11_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						(g11_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
						(g11_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
						, ///
						bylabel("11th grade") ///	
						||  ///
						, ///
						keep(treated_post) ///
						legend(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'") col(3) pos(6)) ///
						xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
						///xlabel(`xmin'(0.02)0.02) ///
						xlabel(#5) ///								
						xline(0, lcolor(gs12)) ///
						///xline(`xlines', lcolor(gs15))  ///
						grid(none) ///
						bycoefs	

				
						
				//graph save "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.gph" , replace	
				//capture qui graph export "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.eps", replace	
				capture qui graph export "$FIGURES\TWFE\covid_twfe_grades_siblings_`vlab'_`type'_${max_sibs}${covid_data}.png", replace	
				capture qui graph export "$FIGURES\TWFE\covid_twfe_grades_siblings_`vlab'_`type'_${max_sibs}${covid_data}.pdf", replace					
				
				}
				
		

			}
		}
	}

end


********************************************************************************
* Event Study - GPA
********************************************************************************

capture program drop event_gpa
program define event_gpa	
	
	


args treatment_type subsample other_filters     //treatment_type: treatment type (generally by # of siblings). 

capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"		



if ${max_sibs}==4 local legend_child_${max_sibs} = "4 children"	
if ${max_sibs}==4 local legend_sib_${max_sibs} = "3 siblings"	

*- GPA Overall 
estimates clear

clear

*- Event Study

foreach only_covid in "all" /*"20_21"*/ {
	foreach level in "all" "elm" "sec" {
		//foreach young in "" /*"0" "1"*/ {
		//	foreach area in  "all" /*"urb" "rur"*/  { 
		//		foreach lives_both_parents in  "all" /*"both" "notboth"*/  { 
		//			foreach hed in "all" /*"hed" "nhed"*/  { //none or at least one. # No change
						///foreach res in "all" /*"alls"*/ /*"nint"*/ /*"ncom" "lses" "nqui"*/ { //all sample with data, No internet, no computer, low ses, no quiet room
							foreach v in "std_gpa_m" "std_gpa_c" "std_gpa_m_adj" "std_gpa_c_adj"  "pass_math" "pass_read" "higher_ed_parent"  {
								di "`v' - `treatment_type' - `subsample' - `other_filters'"
							
							if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
							if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
							if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue

							estimates clear
							global x = "$x_all"
							if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
							
							use ///
							/*OUTCOME*/		`v'  ///
							/*ID*/ 			id_ie id_per_umc year grade ///
							/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
							/*DID*/			treated post treated_post ///
							/*EVENT*/		year_t_?? ///
							/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
							/*A*/ 			min_socioec_index_ie_cat quart_class_size quart_grade_size /*OTHER IN DEMOG*/ ///
							/*B*/			/*GRADE AND MALE*/ ///
							/*C*/			///closest_age_gap* ///
							/*D*/			educ_cat_mother /*higher_ed_parent*/ lives_with_mother lives_with_father ///
							/*Other*/		/**has_internet *has_comp *low_ses *quiet_room*/ ///
							using "$TEMP\pre_reg_covid${covid_data}", clear
							
							*- School has internet
							merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)

							
							if "`treatment_type'"=="internet" {
								drop treated treated_post
								gen treated = internet==1
								gen treated_post = treated*post
								local lab_control = "No Internet"
								local lab_treated = "Internet"
							}	

							if "`treatment_type'"=="parent_ed" {
								drop treated treated_post
								gen treated = (educ_cat_mother==3)
								gen treated_post = treated*post
								local lab_control = "Mother no higher ed."
								local lab_treated = "Mother some higher ed."
							}

							if "`treatment_type'"=="both_parents" {
								drop treated treated_post
								gen treated = (lives_with_mother==1 & lives_with_father==1)
								gen treated_post = treated*post
								local lab_control = "Does not live with both"
								local lab_treated = "Lives with both parents"
							}	
							
							if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
							if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
							if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
							if "`subsample'" == "all" 		di "All siblings"
		
							*- Remove early grades and years
							keep if year>=2016
							drop if grade==0
							
							if "`level'" == "all" {
								keep if grade>=1 & grade<=11
								//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
								//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
								gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
								local young_lab = "Primary" //Primary in 2020
								local old_lab 	= "Secondary"
								}
							if "`level'" == "elm" {
								keep if grade>=1 & grade<=6
								//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
								//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
								//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
								//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
								gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
								local young_lab = "1st-3rd grade"
								local old_lab 	= "4th-6th grade"
								}
							if "`level'" == "sec" {
								keep if grade>=7	
								//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
								//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
								//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
								//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
								gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
								local young_lab = "7th-8th grade"
								local old_lab 	= "9th-11th grade"
								}							
							
							*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
							if "`only_covid'" == "20_21" keep if year<=2021			
							
							
							if strmatch("`other_filters'","*rural*")==1 		keep if urban_siagie==0
							if strmatch("`other_filters'","*urban*")==1 		keep if urban_siagie==1
							
							if strmatch("`other_filters'","*parent_nhed*")==1 	keep if higher_ed_parent == 0
							if strmatch("`other_filters'","*parent_hed*")==1 	keep if higher_ed_parent == 1	
							
							if strmatch("`other_filters'","*both*")==1 			keep if lives_with_mother==1 & lives_with_father==1
							if strmatch("`other_filters'","*notboth*")==1 		keep if (lives_with_mother==1 & lives_with_father==0) | (lives_with_mother==0 & lives_with_father==1) | (lives_with_mother==0 & lives_with_father==0)						
							
							if strmatch("`other_filters'","*young*")==1 		keep if young==1				
							if strmatch("`other_filters'","*old*")==1 			keep if young==0						
							
									
							/*		
							if "`res'" == "all" 		keep if 1==1
							if "`res'" == "alls" 		keep if has_internet!=.
							if "`res'" == "nint" 		keep if has_internet==0
							if "`res'" == "ncom" 		keep if has_comp==0
							if "`res'" == "lses" 		keep if low_ses==1
							if "`res'" == "nqui" 		keep if quiet_room==0
							*/
							
							local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
							local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
							if "`v'" == "std_gpa_m" 		{
								local vlab = "gpa_m"
								local xtitle = "Standardized Mathematics GPA"
								}
							if "`v'" == "std_gpa_c" 		{
								local vlab = "gpa_c"
								local xtitle = "Standardized Reading GPA"
								}
							if "`v'" == "std_gpa_m_adj" 		{
								local vlab = "gpa_m_adj"
								local xtitle = "Standardized Mathematics GPA"
								}
							if "`v'" == "std_gpa_c_adj" 		{
								local vlab = "gpa_c_adj"
								local xtitle = "Standardized Reading GPA"
								}
							if "`v'" == "pass_math" 		{
								local vlab = "pass_m"
								local xtitle = "% A's Mathematics"
								}
							if "`v'" == "pass_read" 		{
								local vlab = "pass_c"
								local xtitle = "% A's Reading"
								}
							if "`v'" == "approved" 		{
								local vlab = "pass"
								local xtitle = "Grade Promotion"
								}
							if "`v'" == "approved_first" 		{
								local vlab = "passf"
								local xtitle = "Grade Promotion without recovery"
								}
							if "`v'" == "higher_ed_parent" 		{
								local vlab = "hed_parent"
								local xtitle = "% Parent with higher education"
								}	
										
						
							/*
							local res_lab = ""
							if "`res'" == "alls" local res_lab = "s"
							if "`res'" == "nint" local res_lab = "i"
							if "`res'" == "ncom" local res_lab = "c"
							if "`res'" == "lses" local res_lab = "l"
							if "`res'" == "nqui" local res_lab = "q"
							*/
							
							//merge m:1 id_ie using "$TEMP\siagie_ece_ie_obs", keep(master match) keepusing(`v'_*) nogen
							
							*- Event Study
							//OC vs size =2/3/4
							reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if fam_total_${fam_type}<=${max_sibs}, a(year grade id_ie)
							estimates store event_`vlab'
							
							//OC vs size =2
							reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(fam_total_${fam_type},1,2)==1 , a(year grade id_ie)
							estimates store event_`vlab'_2
							
							//OC vs size =3
							reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(fam_total_${fam_type},1,3)==1 , a(year grade id_ie)
							estimates store event_`vlab'_3
							
							if ${max_sibs} == 4 eststo event_`vlab'_4 :reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(fam_total_${fam_type},1,4)==1 , a(year grade id_ie)
						
							
							local drop_vars = ""
							if "`level'" == "elm" & strmatch("`other_filters'","*young*") local drop_vars = "year_t_b5 year_t_b4 year_t_b3"
						
							coefplot 	(event_`vlab', drop(year_t_b6 `drop_vars') mcolor(gs0) ciopts(bcolor(gs0%20)) lcolor(gs0) cirecast(rarea)) ///
										, ///
										omitted ///
										keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
										drop(year_t_b6 year_t_b5 year_t_b4) ///
										///leg(order(1 "Children with siblings" 3 "1 sibling" 5 "2 siblings" 7 "`legend_sib_${max_sibs}'")) ///
										coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
										yline(0,  lcolor(gs10))  ///
										ytitle("`xtitle'") ///
										ylab(-.1(.02).04) ///
										///xline(2019.5 2021.5) ///
										subtitle("`tlab'") ///
										legend(off)
					
						if "${covid_data}" == "_TEST" {
							di "TEST"
							capture qui graph export "$FIGURES_TEMP\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
							capture qui graph export "$FIGURES_TEMP\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace	
						}
						if "${covid_data}" == "" {
							di "REAL"
							capture qui graph export "$FIGURES\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
							capture qui graph export "$FIGURES\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace	
						}						
							coefplot 	(event_`vlab'_2, drop(year_t_b6 `drop_vars') mcolor("${ek_blue}") ciopts(bcolor("${ek_blue}%30")) lcolor("${ek_blue}") cirecast(rarea)) ///
										, ///
										omitted ///
										keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
										drop(year_t_b6 year_t_b5 year_t_b4) ///
										///leg(order(1 "Children with siblings" 3 "1 sibling" 5 "2 siblings" 7 "`legend_sib_${max_sibs}'")) ///
										coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
										yline(0,  lcolor(gs10))  ///
										ytitle("`xtitle'") ///
										ylab(-.1(.02).04) ///
										///xline(2019.5 2021.5) ///
										subtitle("`tlab'") ///
										legend(off)
					
						if "${covid_data}" == "_TEST" {
							di "TEST"
							capture qui graph export "$FIGURES_TEMP\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_2_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
							capture qui graph export "$FIGURES_TEMP\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_2_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace		
						}
						if "${covid_data}" == "" {
							di "REAL"
							capture qui graph export "$FIGURES\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_2_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
							capture qui graph export "$FIGURES\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_2_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace		
						}	
						
						
							
							coefplot 	///(e`vlab'_`area_lab'_`lives_lab'_`hed_lab'_`level_lab'`young'_`res_lab'1, drop(year_t_b6 `drop_vars') mcolor(gs0) ciopts(bcolor(gs0)) lcolor(gs0)) ///
										(event_`vlab'_2, drop(year_t_b6 `drop_vars') mcolor("${ek_blue}") 	ciopts(bcolor("${ek_blue}%30")) 	lcolor("${ek_blue}") cirecast(rarea)) ///
										(event_`vlab'_3, drop(year_t_b6 `drop_vars') mcolor("${ek_green}") 	ciopts(bcolor("${ek_green}%30")) 	lcolor("${ek_green}") cirecast(rarea)) ///
										(event_`vlab'_4, drop(year_t_b6 `drop_vars') mcolor("${ek_red}") 	ciopts(bcolor("${ek_red}%30")) 	lcolor("${ek_red}") cirecast(rarea)) ///
										, ///
										omitted ///
										keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
										drop(year_t_b6 year_t_b5 year_t_b4) ///
										///leg(order(1 "Children with siblings" 3 "1 sibling" 5 "2 siblings" 7 "`legend_sib_${max_sibs}'")) ///
										leg(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'")) ///
										coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
										yline(0,  lcolor(gs10))  ///
										ytitle("`xtitle'") ///
										ylab(-.1(.02).04) ///
										///xline(2019.5 2021.5) ///
										subtitle("`tlab'") ///
										legend(pos(6) col(4))
					
						if "${covid_data}" == "_TEST" {
							di "TEST"
							capture qui graph export "$FIGURES_TEMP\Event Study\covid_event_bysibs_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
							capture qui graph export "$FIGURES_TEMP\Event Study\covid_event_bysibs_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace		
						}
						if "${covid_data}" == "" {
							di "REAL"
							capture qui graph export "$FIGURES\Event Study\covid_event_bysibs_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
							capture qui graph export "$FIGURES\Event Study\covid_event_bysibs_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace			
						}	

					}
			}
	}
		
end

********************************************************************************
* Event Study - Approved
********************************************************************************

capture program drop event_approved
program define event_approved	

if ${max_sibs}==4 local legend_child_${max_sibs} = "4 children"	
if ${max_sibs}==4 local legend_sib_${max_sibs} = "3 siblings"	
			
estimates clear
foreach level in "all" "elm" "sec" {
	foreach area in  "all" "urb" "rur"  {
		foreach hed_parent in "no" "yes" "all" { //none or at least one
			//ds urban_siagie higher_ed_parent	
			foreach res in "all" "alls" "nint" "ncom" "lses" "nqui" { //all sample with data, No internet, no computer, low ses, no quiet room
				foreach v in  "approved" "approved_first" {
					di "`v' - `area' - `hed_parent' - `level' - `res'"
					
					//if "`area'" == "urb" continue
					//if "`area'" == "rur" &  "`hed_parent'" =="no" & "`level'" == "all" & inlist("`v'","approved_first")!=1 continue
						
					use `v' id_per_umc year_t_?? urban_siagie higher_ed_parent *has_internet *has_comp *low_ses *quiet_room year grade treated post treated_post  id_ie fam_order_${fam_type} fam_total_${fam_type} ${x} using "$TEMP\pre_reg_covid${covid_data}", clear
					
					if "`area'" == "rur" keep if urban_siagie == 0
					if "`area'" == "urb" keep if urban_siagie == 1
					
					if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
					if "`hed_parent'" == "yes" 	keep if higher_ed_parent == 1
					
					if "`level'" == "all" keep if grade>=1 & grade<=11
					if "`level'" == "elm" keep if grade>=1 & grade<=6
					if "`level'" == "sec" keep if grade>=7
					
					if "`res'" == "all" 		keep if 1==1
					if "`res'" == "alls" 		keep if has_internet!=.
					if "`res'" == "nint" 		keep if has_internet==0
					if "`res'" == "ncom" 		keep if has_comp==0
					if "`res'" == "lses" 		keep if low_ses==1
					if "`res'" == "nqui" 		keep if quiet_room==0
									
					if "`v'" == "approved" 			local vlab = "pass"
					if "`v'" == "approved_first" 	local vlab = "passf"
					
					
					//merge m:1 id_ie using "$TEMP\siagie_ece_ie_obs", keep(master match) keepusing(`v'_*) nogen
					
					//OC vs size =2/3
					reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if fam_total_${fam_type}<=${max_sibs}, a(year grade id_ie)
					estimates store e`vlab'_`area'_`hed_parent'_`level'_`res'1
					
					//OC vs size =2
					reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(fam_total_${fam_type},1,2)==1 , a(year grade id_ie)
					estimates store e`vlab'_`area'_`hed_parent'_`level'_`res'2
					
					//OC vs size =3
					reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(fam_total_${fam_type},1,3)==1 , a(year grade id_ie)
					estimates store e`vlab'_`area'_`hed_parent'_`level'_`res'3		
					
					if ${max_sibs} == 4 eststo e`vlab'_`area'_`hed_parent'_`level'_`res'4: reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(fam_total_${fam_type},1,4)==1 , a(year grade id_ie)
					
					}
				forvalues i = 1/4 {
		
					coefplot 	epass_`area'_`hed_parent'_`level'_`res'`i' epassf_`area'_`hed_parent'_`level'_`res'`i', ///
								omitted ///
								keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
								drop(year_t_b6 year_t_b5 year_t_b4) ///
								leg(order(1 "Passed grade" 3 "Passed grade without extension")) ///
								coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016"  year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
								yline(0,  lcolor(gs10))  ///
								ytitle("Effect") ///
								///xline(2019.5 2021.5) ///
								subtitle("Panel B: Grade Pass Rate") ///
								legend(pos(6) col(3)) ///
								name(panel_B_PASSED_`level'_`res'`i',replace)	
					//graph save "$FIGURES\covid_approved_`area'_`hed_parent'_`level'_`res'`i'.gph" , replace	
					//capture qui graph export "$FIGURES\covid_approved_`area'_`hed_parent'_`level'_`res'`i'.eps", replace	
					capture qui graph export "$FIGURES\Event Study\covid_approved_`area'_`hed_parent'_`level'_`res'`i'${covid_data}.png", replace			
					capture qui graph export "$FIGURES\Event Study\covid_approved_`area'_`hed_parent'_`level'_`res'`i'${covid_data}.pdf", replace				
					}
				}	
			}
		estimates clear
		}
	}

end


********************************************************************************
* Event Study - Cohort Grade
********************************************************************************

capture program drop event_cohort_grade
program define event_cohort_grade	
	foreach v in "std_gpa_m" /*"std_gpa_c" "std_gpa_m_adj" "std_gpa_c_adj" "pass_math" "pass_read"*/ /*"higher_ed_parent"*/ {
		foreach area in "all" /*"urb" "rur"*/  {
			foreach res in "all" /*"alls" "nint"*/ { 
				
				global x = "$x_all"
				if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"
				 
				estimates clear
				use `v' id_per_umc year_t_?? urban_siagie higher_ed_parent *has_internet *has_comp *low_ses *quiet_room year grade treated post treated_post  id_ie fam_order_${fam_type} fam_total_${fam_type} ${x_all} using "$TEMP\pre_reg_covid${covid_data}", clear
						
				di as result "*******************************"
				di as text "`v' - `area' - `res'"
				di as result "*******************************"
			
				drop if grade==0

				/*
				bys id_per_umc: egen year_1st 	= min(cond(grade==1,year,.))
				//bys id_per_umc: egen grade_2016	= max(cond(year==2016,grade,.))
				bys id_per_umc: egen grade_2019	= max(cond(year==2019,grade,.))

				bys id_per_umc: egen min_grade 		= min(grade)
				bys id_per_umc: egen year_min_grade = min(cond(grade==min_grade,year,.))

				//Expected grade based on first year in primary			
				gen grade_exp = year-year_1st+1 
				tab grade_exp grade

				//Expected grade based on first year and grade observed (proxy because it could've repeated before.)
				gen grade_exp_proxy = year-year_min_grade+min_grade

				*- On time variables
				gen byte on_time 		=  (grade_exp==grade)		if grade_exp!=.
				gen byte on_time_proxy 	=  (grade_exp_proxy==grade)	if grade_exp_proxy!=.
				
				drop min_grade year_min_grade grade_exp grade_exp_proxy on_time
				compress
				*/
				
				*- Divide sample based on expected cohort
				bys id_per_umc: egen min_year 		= min(year)
				bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
				gen proxy_1st = min_year - grade_min_year  + 1
				
				keep if year>=2015
				
				/*
				bys id_per_umc: egen year_1st 	= min(cond(grade==1,year,.))
				bys id_per_umc: egen grade_2016	= max(cond(year==2016,grade,.))
				*/
				if "`area'" == "rur" keep if urban_siagie == 0
				if "`area'" == "urb" keep if urban_siagie == 1
				
				if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
				if "`hed_parent'" == "ys" 	keep if higher_ed_parent == 1
				
				if "`level'" == "all" keep if grade>=1 & grade<=11
				if "`level'" == "elm" keep if grade>=1 & grade<=6
				if "`level'" == "sec" keep if grade>=7
				
				if "`res'" == "all" 		keep if 1==1
				if "`res'" == "alls" 		keep if has_internet!=.
				if "`res'" == "nint" 		keep if has_internet==0
				if "`res'" == "ncom" 		keep if has_comp==0
				if "`res'" == "lses" 		keep if low_ses==1
				if "`res'" == "nqui" 		keep if quiet_room==0
				
				//if "`res'" != "all" 		keep if on_time_proxy==1
				
				if "`v'" == "std_gpa_m" {
					local vlab = "gpa_m"
					local tlab = "Standardized mathematics GPA"
				}
				if "`v'" == "std_gpa_c" {
					local vlab = "gpa_c"
					local tlab = "Standardized reading GPA"
				}
				
				if "`v'" == "std_gpa_m_adj" {
					local vlab = "gpa_m_adj"
					local tlab = "Standardized mathematics GPA (adj)"
				}
				if "`v'" == "std_gpa_c_adj" {
					local vlab = "gpa_c_adj"
					local tlab = "Standardized reading GPA (adj)"
				}				
						
				if "`v'" == "pass_math" {
					local vlab = "pass_m"
					local tlab = "Passed mathematics"
				}						
				
				if "`v'" == "pass_read" {
					local vlab = "pass_c"
					local tlab = "Passed reading"
				}					
				if "`v'" == "higher_ed_parent" {
					local vlab = "hed"
					local tlab = "Has parent with higher education"
				}			
				
				keep `v' /*event*/ year_t_?? treated /*covariates*/ ${x} /*conditional*/ proxy_1st  /*FE*/ year grade id_ie
				
				*- Results by cohort
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018) & year>=2015, a(year grade id_ie)
				estimates store c_all_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if proxy_1st==2011 & year>=2015, a(year grade id_ie)
				estimates store c_2011_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if proxy_1st==2012 & year>=2015, a(year grade id_ie)
				estimates store c_2012_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if proxy_1st==2013 & year>=2015, a(year grade id_ie)
				estimates store c_2013_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if proxy_1st==2014 & year>=2015, a(year grade id_ie)
				estimates store c_2014_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if proxy_1st==2015 & year>=2015, a(year grade id_ie)
				estimates store c_2015_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if proxy_1st==2016 & year>=2016, a(year grade id_ie)
				estimates store c_2016_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if proxy_1st==2017 & year>=2017, a(year grade id_ie)
				estimates store c_2017_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if proxy_1st==2018 & year>=2018, a(year grade id_ie)
				estimates store c_2018_`res'_`area'_`vlab'
								
				
				local add_coef = ""
				//if "`res'" == "all" local add_coef = `"(c_2017*, drop(year_t_b6 year_t_b5 year_t_b4) mcolor("`blue_4'") ciopts(bcolor("`blue_4'")))"'
				
				if "`res'" == "all" {
				coefplot 	(c_all*, 													mcolor(gs0) ciopts(bcolor(gs0)) lcolor(gs0)) ///
							///(c_2013*, drop(year_t_b6) 									mcolor("`blue_1'") ciopts(bcolor("`blue_1'"))) ///
							(c_2011*, drop(year_t_b6)									mcolor("${blue_1}") ciopts(bcolor("${blue_1}")) lcolor("${blue_1}")) ///
							(c_2012*, drop(year_t_b6)									mcolor("${blue_2}") ciopts(bcolor("${blue_2}")) lcolor("${blue_2}")) ///
							(c_2013*, drop(year_t_b6)									mcolor("${blue_3}") ciopts(bcolor("${blue_3}")) lcolor("${blue_3}")) ///
							(c_2014*, drop(year_t_b6)									mcolor("${blue_4}") ciopts(bcolor("${blue_4}")) lcolor("${blue_4}")) ///
							(c_2015*, drop(year_t_b6)									mcolor("${red_4}") ciopts(bcolor("${red_4}")) lcolor("${red_4}")) ///
							(c_2016*, drop(year_t_b6 year_t_b5)							mcolor("${red_3}") ciopts(bcolor("${red_3}")) lcolor("${red_3}")) ///
							(c_2017*, drop(year_t_b6 year_t_b5 year_t_b4) 				mcolor("${red_2}") ciopts(bcolor("${red_2}")) lcolor("${red_2}")) /// 2007 not included for survey sample since that cohort wouldn't be surveyed in 2nd or 4th grade.
							(c_2018*, drop(year_t_b6 year_t_b5 year_t_b4 year_t_b3) 	mcolor("${red_1}") ciopts(bcolor("${red_1}")) lcolor("${red_1}")), ///
							omitted ///
							keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
							drop(year_t_b6) ///
							leg(order(1 "All" 3 "2011" 5 "2012" 7 "2013" 9 "2014" 11 "2015" 13 "2016" 15 "2017" 17 "2018")) ///
							coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
							yline(0,  lcolor(gs10))  ///
							ytitle("Effect") ///
							ylab(-.1(.02).04) ///
							///xline(2019.5 2021.5) ///
							subtitle("`tlab' by year in 1st grade") ///
							legend(pos(6) col(6)) ///
							name(check_cohorts,replace)	
					}
					
				if "`res'" != "all" {
				coefplot 	(c_all*, 													mcolor(gs0) ciopts(bcolor(gs0)) lcolor(gs0)) ///
							///(c_2013*, drop(year_t_b6) 									mcolor("`blue_1'") ciopts(bcolor("`blue_1'"))) ///
							(c_2014*, drop(year_t_b6)									mcolor("${blue_2}") ciopts(bcolor("${blue_2}")) lcolor("${blue_2}")) ///
							(c_2015*, drop(year_t_b6)									mcolor("${blue_3}") ciopts(bcolor("${blue_3}")) lcolor("${blue_3}")) ///
							(c_2016*, drop(year_t_b6 year_t_b5)							mcolor("${red_3}") ciopts(bcolor("${red_3}")) lcolor("${red_3}")) ///
							(c_2018*, drop(year_t_b6 year_t_b5 year_t_b4 year_t_b3) 	mcolor("${red_1}") ciopts(bcolor("${red_1}")) lcolor("${red_1}")) ///
							, ///
							omitted ///
							keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
							drop(year_t_b6) ///
							leg(order(1 "All" 3 "2014" 5 "2015" 7 "2016" 9 "2018")) ///
							coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
							yline(0,  lcolor(gs10))  ///
							ytitle("Effect") ///
							ylab(-.1(.02).04) ///
							///xline(2019.5 2021.5) ///
							subtitle("`tlab' by year in 1st grade") ///
							legend(pos(6) col(6)) ///
							name(check_cohorts,replace)	
					}				
							
				capture qui graph export "$FIGURES\Event Study\covid_cohort_`res'_`area'_`v'${covid_data}.png", replace				
						
				coefplot 	(c_all*, 													mcolor(gs0) ciopts(bcolor(gs0)) lcolor(gs0)) ///
							, ///
							omitted ///
							keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
							drop(year_t_b6) ///
							coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
							yline(0,  lcolor(gs10))  ///
							ytitle("Effect") ///
							ylab(-.1(.02).04) ///
							///xline(2019.5 2021.5) ///
							subtitle("`tlab'") ///
							legend(off) 		
							
				capture qui graph export "$FIGURES\Event Study\covid_cohort_full_`res'_`area'_`v'${covid_data}.png", replace				
						
				/*			
				*- Results by grade in 2016
				//reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(grade_2016,1,2,3,4,5), a(year grade id_ie)
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(grade_2019,2,4,5,6,7), a(year grade id_ie)
				estimates store g_all_`res'_`area'_`vlab'
					
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade_2019==2 & year>=2018, a(year grade id_ie)
				estimates store g_2_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade_2019==4 & year>=2016, a(year grade id_ie)
				estimates store g_4_`res'_`area'_`vlab'

				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade_2019==5, a(year grade id_ie)
				estimates store g_5_`res'_`area'_`vlab'

				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade_2019==6, a(year grade id_ie)
				estimates store g_6_`res'_`area'_`vlab'

				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade_2019==7, a(year grade id_ie)
				estimates store g_7_`res'_`area'_`vlab'
				/*
				if "`res'" == "all" {
					reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade_2016==5, a(year grade id_ie)
					estimates store g_5_`res'_`area'_`vlab'				
					}
				*/
				coefplot 	(g_all*,												mcolor(gs0) ciopts(bcolor(gs0)) lcolor(gs0)) ///
							(g_2_*, drop(year_t_b6 year_t_b5 year_t_b4 year_t_b3)	mcolor("`red_1'") ciopts(bcolor("`red_1'")) lcolor("`red_1'")) ///
							(g_4_*, drop(year_t_b6 year_t_b5)						mcolor("`red_3'") ciopts(bcolor("`red_3'")) lcolor("`red_3'")) ///
							(g_5_*, drop(year_t_b6)									mcolor("`blue_3'") ciopts(bcolor("`blue_3'")) lcolor("`blue_3'")) ///
							(g_6_*,													mcolor("`blue_2'") ciopts(bcolor("`blue_2'")) lcolor("`blue_2'")) ///
							(g_7_*,													mcolor("`blue_1'") ciopts(bcolor("`blue_1'")) lcolor("`blue_1'")) ///
							, ///
							omitted ///
							keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
							drop(year_t_b6) ///
							leg(order(1 "All" 3 "2nd" 5 "4th" 7 "5th" 9 "6th" 11 "7th" /*11 "5th"*/)) ///
							/// leg(order(1 "All" 3 "1st" 5 "2nd" 7 "3rd" 9 "4th" /*11 "5th"*/)) ///
							coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023") ///
							yline(0,  lcolor(gs10))  ///
							ytitle("Effect") ///
							ylab(-.1(.02).04) ///
							xline(2019.5 2021.5) ///
							subtitle("`tlab' by grade in 2019") ///
							legend(pos(6) col(6)) ///
							name(check_cohorts,replace)		
							
				capture qui graph export "$FIGURES\covid_grade_`res'_`area'_`v'${covid_data}.png", replace	
				
				coefplot 	(g_all*, 													mcolor(gs0) ciopts(bcolor(gs0)) lcolor(gs0)) ///
							, ///
							omitted ///
							keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
							drop(year_t_b6) ///
							coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023") ///
							yline(0,  lcolor(gs10))  ///
							ytitle("Effect") ///
							ylab(-.1(.02).04) ///
							xline(2019.5 2021.5) ///
							subtitle("`tlab'") ///
							legend(off) 		
							
				capture qui graph export "$FIGURES\covid_grade_full_`res'_`area'_`v'${covid_data}.png", replace					
				
				
				reghdfe `v' 			year_t_b6 year_t_b5 year_t_b4 year_t_b3 o.year_t_b2 year_t_o1 year_t_a?  treated ${x} if inlist(grade_2019,2,4,5,6,7), a(year grade id_ie)
				estimates store test
				
							coefplot 	(test, mcolor(gs0) ciopts(bcolor(gs0)) lcolor(gs0)), ///
							omitted ///
							keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
							drop(year_t_b6) ///
							coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023") ///
							yline(0,  lcolor(gs10))  ///
							ytitle("Effect") ///
							ylab(-.1(.02).04) ///
							xline(2019.5 2021.5) ///
							subtitle("`tlab' by grade in 2019") ///
							legend(pos(6) col(6))
							
				capture qui graph export "$FIGURES\test_grade_`res'_`area'_`v'${covid_data}.png", replace	
				*/
			}
		}
	}	

end


********************************************************************************
* Event Study - By grades
********************************************************************************

capture program drop event_grade
program define event_grade	

	foreach v in "std_gpa_m" "std_gpa_c" "std_gpa_m_adj" "std_gpa_c_adj" "pass_math" "pass_read" /*"higher_ed_parent"*/ {
		foreach area in "all" /*"urb" "rur"*/  {
			foreach res in "all" /*"alls" "nint"*/ { 
				
				global x = "$x_all"
				if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"
				 
				estimates clear
				use `v' id_per_umc year_t_?? urban_siagie higher_ed_parent *has_internet *has_comp *low_ses *quiet_room year grade treated post treated_post  id_ie fam_order_${fam_type} fam_total_${fam_type} ${x_all} using "$TEMP\pre_reg_covid${covid_data}", clear
						
				di as result "*******************************"
				di as text "`v' - `area' - `res'"
				di as result "*******************************"
			
				drop if grade==0

				/*
				bys id_per_umc: egen year_1st 	= min(cond(grade==1,year,.))
				//bys id_per_umc: egen grade_2016	= max(cond(year==2016,grade,.))
				bys id_per_umc: egen grade_2019	= max(cond(year==2019,grade,.))

				bys id_per_umc: egen min_grade 		= min(grade)
				bys id_per_umc: egen year_min_grade = min(cond(grade==min_grade,year,.))

				//Expected grade based on first year in primary			
				gen grade_exp = year-year_1st+1 
				tab grade_exp grade

				//Expected grade based on first year and grade observed (proxy because it could've repeated before.)
				gen grade_exp_proxy = year-year_min_grade+min_grade

				*- On time variables
				gen byte on_time 		=  (grade_exp==grade)		if grade_exp!=.
				gen byte on_time_proxy 	=  (grade_exp_proxy==grade)	if grade_exp_proxy!=.
				
				drop min_grade year_min_grade grade_exp grade_exp_proxy on_time
				compress
				*/
				
				*- Divide sample based on expected cohort
				bys id_per_umc: egen min_year 		= min(year)
				bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
				gen proxy_1st = min_year - grade_min_year  + 1
				
				keep if year>=2015
				
				/*
				bys id_per_umc: egen year_1st 	= min(cond(grade==1,year,.))
				bys id_per_umc: egen grade_2016	= max(cond(year==2016,grade,.))
				*/
				if "`area'" == "rur" keep if urban_siagie == 0
				if "`area'" == "urb" keep if urban_siagie == 1
				
				if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
				if "`hed_parent'" == "ys" 	keep if higher_ed_parent == 1
				
				if "`level'" == "all" keep if grade>=1 & grade<=11
				if "`level'" == "elm" keep if grade>=1 & grade<=6
				if "`level'" == "sec" keep if grade>=7
				
				if "`res'" == "all" 		keep if 1==1
				if "`res'" == "alls" 		keep if has_internet!=.
				if "`res'" == "nint" 		keep if has_internet==0
				if "`res'" == "ncom" 		keep if has_comp==0
				if "`res'" == "lses" 		keep if low_ses==1
				if "`res'" == "nqui" 		keep if quiet_room==0
				
				//if "`res'" != "all" 		keep if on_time_proxy==1
				
				if "`v'" == "std_gpa_m" {
					local vlab = "gpa_m"
					local tlab = "Standardized mathematics GPA"
				}
				if "`v'" == "std_gpa_c" {
					local vlab = "gpa_c"
					local tlab = "Standardized reading GPA"
				}
				
				if "`v'" == "std_gpa_m_adj" {
					local vlab = "gpa_m_adj"
					local tlab = "Standardized mathematics GPA (adj)"
				}
				if "`v'" == "std_gpa_c_adj" {
					local vlab = "gpa_c_adj"
					local tlab = "Standardized reading GPA (adj)"
				}				
						
				if "`v'" == "pass_math" {
					local vlab = "pass_m"
					local tlab = "Passed mathematics"
				}						
				
				if "`v'" == "pass_read" {
					local vlab = "pass_c"
					local tlab = "Passed reading"
				}					
				if "`v'" == "higher_ed_parent" {
					local vlab = "hed"
					local tlab = "Has parent with higher education"
				}			
				
				keep `v' /*event*/ year_t_?? treated /*covariates*/ ${x} /*conditional*/ proxy_1st  /*FE*/ year grade id_ie
				
				*- All
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if year>=2015, a(year grade id_ie)
				estimates store g_all_`res'_`area'_`vlab'	
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if year>=2015 & grade<=6, a(year grade id_ie)
				estimates store g_pri_`res'_`area'_`vlab'	
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if year>=2015 & grade>=7, a(year grade id_ie)
				estimates store g_sec_`res'_`area'_`vlab'					
				
				*- Results by cohort
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade==1, a(year grade id_ie)
				estimates store g_1_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade==2, a(year grade id_ie)
				estimates store g_2_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade==3, a(year grade id_ie)
				estimates store g_3_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade==4, a(year grade id_ie)
				estimates store g_4_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade==5, a(year grade id_ie)
				estimates store g_5_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade==6, a(year grade id_ie)
				estimates store g_6_`res'_`area'_`vlab'				
	

				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade==7, a(year grade id_ie)
				estimates store g_7_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade==8, a(year grade id_ie)
				estimates store g_8_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade==9, a(year grade id_ie)
				estimates store g_9_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade==10, a(year grade id_ie)
				estimates store g_10_`res'_`area'_`vlab'
				
				reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if grade==11, a(year grade id_ie)
				estimates store g_11_`res'_`area'_`vlab'					
	
				
				local add_coef = ""
				//if "`res'" == "all" local add_coef = `"(c_2017*, drop(year_t_b6 year_t_b5 year_t_b4) mcolor("`blue_4'") ciopts(bcolor("`blue_4'")))"'
				
				
				coefplot 	(g_all*, 	drop(year_t_b6)							mcolor(gs0) ciopts(bcolor(gs0)) lcolor(gs0)) ///
							(g_pri, 	drop(year_t_b6)							mcolor("${blue_1}") ciopts(bcolor("${blue_1}")) lcolor("${blue_1}")) ///
							(g_sec, 	drop(year_t_b6)							mcolor("${blue_2}") ciopts(bcolor("${blue_2}")) lcolor("${blue_2}")) ///
							, ///
							omitted ///
							keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
							drop(year_t_b6) ///
							leg(order(1 "All" 3 "Primary" 5 "Secondary")) ///
							coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
							yline(0,  lcolor(gs10))  ///
							ytitle("Effect") ///
							ylab(-.1(.02).04) ///
							///xline(2019.5 2021.5) ///
							///subtitle("`tlab' by year in 1st grade") ///
							legend(pos(6) col(6)) ///
							name(check_cohorts,replace)	
				capture qui graph export "$FIGURES\Event Study\covid_grade_`res'_`area'_`v'${covid_data}.png", replace				
				capture qui graph export "$FIGURES\Event Study\covid_grade_`res'_`area'_`v'${covid_data}.pdf", replace	
				
				
				
				coefplot 	(g_pri*, 	drop(year_t_b6)									mcolor(gs0) ciopts(bcolor(gs0)) lcolor(gs0)) ///
							(g_1, 		drop(year_t_b6)									mcolor("${blue_1}") ciopts(bcolor("${blue_1}")) lcolor("${blue_1}")) ///
							(g_2, 		drop(year_t_b6)									mcolor("${blue_2}") ciopts(bcolor("${blue_2}")) lcolor("${blue_2}")) ///
							(g_3, 		drop(year_t_b6)									mcolor("${blue_3}") ciopts(bcolor("${blue_3}")) lcolor("${blue_3}")) ///
							(g_4, 		drop(year_t_b6)									mcolor("${blue_4}") ciopts(bcolor("${blue_4}")) lcolor("${blue_4}")) ///
							(g_5, 		drop(year_t_b6)									mcolor("${red_4}") ciopts(bcolor("${red_4}")) lcolor("${red_4}")) ///
							(g_6, 		drop(year_t_b6)									mcolor("${red_3}") ciopts(bcolor("${red_3}")) lcolor("${red_3}")) ///
							, ///
							omitted ///
							keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
							drop(year_t_b6) ///
							leg(order(1 "Primary" 3 "1st" 5 "2nd" 7 "3rd" 9 "4th" 11 "5th" 13 "6th")) ///
							coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
							yline(0,  lcolor(gs10))  ///
							ytitle("Effect") ///
							ylab(-.1(.02).04) ///
							///xline(2019.5 2021.5) ///
							///subtitle("`tlab' by year in 1st grade") ///
							legend(pos(6) col(6)) ///
							name(check_cohorts,replace)	
				capture qui graph export "$FIGURES\Event Study\covid_grade_pri_`res'_`area'_`v'${covid_data}.png", replace				
				capture qui graph export "$FIGURES\Event Study\covid_grade_pri_`res'_`area'_`v'${covid_data}.pdf", replace						
	
				coefplot 	(g_sec*,	drop(year_t_b6) 								mcolor(gs0) ciopts(bcolor(gs0)) lcolor(gs0)) ///
							(g_7, 		drop(year_t_b6)									mcolor("${blue_1}") ciopts(bcolor("${blue_1}")) lcolor("${blue_1}")) ///
							(g_8, 		drop(year_t_b6)									mcolor("${blue_2}") ciopts(bcolor("${blue_2}")) lcolor("${blue_2}")) ///
							(g_9, 		drop(year_t_b6)									mcolor("${blue_3}") ciopts(bcolor("${blue_3}")) lcolor("${blue_3}")) ///
							(g_10, 		drop(year_t_b6)									mcolor("${blue_4}") ciopts(bcolor("${blue_4}")) lcolor("${blue_4}")) ///
							(g_11, 		drop(year_t_b6)									mcolor("${red_4}") ciopts(bcolor("${red_4}")) lcolor("${red_4}")) ///
							, ///
							omitted ///
							keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
							drop(year_t_b6) ///
							leg(order(1 "Secondary" 3 "7th" 5 "8th" 7 "9th" 9 "10th" 11 "11th")) ///
							coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
							yline(0,  lcolor(gs10))  ///
							ytitle("Effect") ///
							ylab(-.1(.02).04) ///
							///xline(2019.5 2021.5) ///
							///subtitle("`tlab' by year in 1st grade") ///
							legend(pos(6) col(6)) ///
							name(check_cohorts,replace)	
				capture qui graph export "$FIGURES\Event Study\covid_grade_sec_`res'_`area'_`v'${covid_data}.png", replace				
				capture qui graph export "$FIGURES\Event Study\covid_grade_sec_`res'_`area'_`v'${covid_data}.pdf", replace						
					

			}
		}
	}	

end



********************************************************************************
* TWFE 
********************************************************************************


capture program drop twfe_placebo
program define twfe_placebo

args type

*- Main categories for TWFE from A, B, C, D
di "Summary TWFE"
/*
A: 
Urb/Rural
Internet
SES

B: 
primary/secondary

C: 


D: 
single parents?
no education?

*/


	clear

	*- TWFE Estimates
	foreach v in /*"std_gpa_m" "std_gpa_c"*/ "std_gpa_m_adj" "std_gpa_c_adj" "pass_math" "pass_read" "prim_on_time" /*"approved" "approved_first"*/ {
		foreach only_covid in "all" "20_21" {
			foreach level in "all" "elm" "sec" {
			
				if ${covid_test} == 1 & inlist("`v'","std_gpa_m_adj","pass_math")==0 	continue
				if ${covid_test} == 1 & inlist("`level'","sec")==1 						continue
				if ${covid_test} == 1 & inlist("`only_covid'","all")==1 				continue
				if inlist("`v'","std_gpa_c_adj","pass_read")==1 & "`level'"!="elm" 		continue //until final version, not needed.
				if inlist("`v'","std_gpa_c_adj","pass_read")==1 & "`only_covid'"!="all" continue //until final version, not needed.
				if inlist("`v'","prim_on_time")==1 				& "`only_covid'"=="all" continue //testing for now so no need to do it all
				
				if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1				continue
				
				estimates clear
				global x = "$x_all"
				if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
				
				use ///
				/*OUTCOME*/		`v'  ///
				/*ID*/ 			id_ie id_per_umc year grade ///
				/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
				/*DID*/			treated post treated_post ///
				/*EVENT*/		year_t_?? ///
				/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
				/*A*/ 			min_socioec_index_ie_cat quart_class_size quart_grade_size /*OTHER IN DEMOG*/ ///
				/*B*/			/*GRADE AND MALE*/ ///
				/*C*/			///closest_age_gap* ///
				/*D*/			educ_cat_mother /*higher_ed_parent*/ lives_with_mother lives_with_father ///
				/*Other*/		/**has_internet *has_comp *low_ses *quiet_room*/ ///
				using "$TEMP\pre_reg_covid${covid_data}", clear
				
				*- School has internet
				merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)
				
				if "`type'"=="internet" {
					drop treated treated_post
					gen treated = internet==1
					gen treated_post = treated*post
					local lab_control = "No Internet"
					local lab_treated = "Internet"
				}	

				if "`type'"=="parent_ed" {
					drop treated treated_post
					gen treated = (educ_cat_mother==3)
					gen treated_post = treated*post
					local lab_control = "Mother no higher ed."
					local lab_treated = "Mother some higher ed."
				}

				if "`type'"=="both_parents" {
					drop treated treated_post
					gen treated = (lives_with_mother==1 & lives_with_father==1)
					gen treated_post = treated*post
					local lab_control = "Does not live with both"
					local lab_treated = "Lives with both parents"
				}						
					
				*- Remove early grades and years
				keep if year>=2016
				drop if grade==0
				
				*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
				if "`only_covid'" == "20_21" keep if year<=2021
				
				*- Divide sample based on grade in 2020
				//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
				
				*- Divide sample based on expected cohort
				bys id_per_umc: egen min_year 		= min(year)
				bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
				gen proxy_1st = min_year - grade_min_year  + 1
								
				
				/*
				*- Not enough pre-years
							
				drop if inlist(grade_2020,1,2)==1
				drop if grade_2020==3 & year<=2017 //<=2017 Would only include those who repeated..
				drop if grade_2020==4 & year<=2016 //<=2016 Would only include those who repeated..
				keep if proxy_1st <= 2018
				*/
				
				
				/*
				if "`area'" == "rur" keep if urban_siagie == 0
				if "`area'" == "urb" keep if urban_siagie == 1

				if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
				if "`hed_parent'" == "yes" 	keep if higher_ed_parent == 1
				*/
				
				if "`level'" == "all" {
					keep if grade>=1 & grade<=11
					//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
					gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
					local young_lab = "Primary" //Primary in 2020
					local old_lab 	= "Secondary"
					}
				if "`level'" == "elm" {
					keep if grade>=1 & grade<=6
					//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
					//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
					//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
					//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
					gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
					local young_lab = "1st-3rd grade"
					local old_lab 	= "4th-6th grade"
					}
				if "`level'" == "sec" {
					keep if grade>=7	
					//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
					//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
					//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
					gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
					local young_lab = "7th-8th grade"
					local old_lab 	= "9th-11th grade"
					}

				local vlab = "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files	
				if "`v'" == "std_gpa_m" 		local vlab = "gpa_m"
				if "`v'" == "std_gpa_c" 		local vlab = "gpa_c"
				if "`v'" == "std_gpa_m_adj" 	local vlab = "gpa_m_adj"
				if "`v'" == "std_gpa_c_adj" 	local vlab = "gpa_c_adj"				
				if "`v'" == "pass_math" 		local vlab = "pass_m"				
				if "`v'" == "pass_read" 		local vlab = "pass_c"				
				if "`v'" == "approved" 			local vlab = "pass"
				if "`v'" == "approved_first" 	local vlab = "passf"
				if "`v'" == "higher_ed_parent" 	local vlab = "hed_parent"
		
				* All students
				di as result "*******" _n as text "All" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 , a(grade year id_ie)
				estimates store all_`vlab'

				
				*****
				* Panel A: Confounders: Type of school
				*****			
				*- Urban/Rural
				di as result "*******" _n as text "Urban" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & urban_siagie==1 , a(grade year id_ie)
				estimates store urb_`vlab'


				di as result "*******" _n as text "Rural" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & urban_siagie==0 , a(grade year id_ie)
				estimates store rur_`vlab'

				
				*- Internet/No Internet
				di as result "*******" _n as text "Internet in school" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & internet==1, a(grade year id_ie)
				estimates store int_`vlab'


				di as result "*******" _n as text "No internet in school" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & internet==0 , a(grade year id_ie)
				estimates store nin_`vlab'

				/*
				*- Public/Private
				di as result "*******" _n as text "Public" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & public_siagie==1, a(grade year id_ie)
				estimates store all_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & public_siagie==1 , a(grade year id_ie)
				estimates store pub_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & public_siagie==1  , a(grade year id_ie)
				estimates store pub_`vlab'_3
				if ${max_sibs} == 4 eststo pub_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & public_siagie==1  , a(grade year id_ie)

				di as result "*******" _n as text "Private" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & public_siagie==0, a(grade year id_ie)
				estimates store all_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & public_siagie==0 , a(grade year id_ie)
				estimates store pri_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & public_siagie==0  , a(grade year id_ie)
				estimates store pri_`vlab'_3
				if ${max_sibs} == 4 eststo pri_`vlab'_4: reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & public_siagie==0  , a(grade year id_ie)
				*/
				*- Low SES/High SES schools
				di as result "*******" _n as text "Low SES IE" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & min_socioec_index_ie_cat==1 , a(grade year id_ie)
				estimates store low_`vlab'


				di as result "*******" _n as text "High SES IE" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & min_socioec_index_ie_cat==4, a(grade year id_ie)
				estimates store hig_`vlab'


				*- By age
				di as result "*******" _n as text "Younger cohort" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & young==1 , a(grade year id_ie)
				estimates store young_`vlab'

				
				di as result "*******" _n as text "Older cohort" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  & young==0, a(grade year id_ie)
				estimates store old_`vlab'

		
				*- Birth Order
				di as result "*******" _n as text "Oldest" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & inlist(fam_order_${fam_type},1)==1, a(grade year id_ie)
				estimates store first_`vlab'

					
				*- Mother's education
				di as result "*******" _n as text "Some level of higher education" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & educ_cat_mother==3 , a(grade year id_ie)
				estimates store edu3_`vlab'

				
				*- Lives with parents
				di as result "*******" _n as text "Only lives with one parent" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1  &  ((lives_with_mother==1 & lives_with_father==0) | (lives_with_mother==0 & lives_with_father==1)), a(grade year id_ie)
				estimates store one_`vlab'
				

				
				if inlist("`v'","std_gpa_m","std_gpa_c","std_gpa_m_adj","std_gpa_c_adj")==1 {
					local xmin = -0.1
					local xlines = "-.1 -.08 -.06 -.04 -.02 .02"
				}
				if inlist("`v'","pass_math","pass_read","approved", "approved_first")==1 {
					local xmin = -0.04
					local xlines = "-.04 -.02 .02"
				}
				
				if inlist("`v'","higher_ed_parent")==1 {
					local xmin = -0.02
					local xlines = "-.02 0 .02"
				}
				 
				*Only main TWFE 
				coefplot 	(all_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							, ///
							bylabel("All Students") ///
							||  ///
							///(urb_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							///(urb_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
							///(urb_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
							///, ///
							///bylabel("Urban") ///
							///||  ///
							(rur_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							, ///
							bylabel("Rural") ///
							||  ///
							(int_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							, ///
							bylabel("Internet in school") ///
							||  ///
							(nin_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							, ///
							bylabel("No internet in school") ///
							||  ///
							///(hig_`vlab'_2, mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							///(hig_`vlab'_3, mcolor("${blue_2}") ciopts(color("${blue_2}"))) ///
							///(hig_`vlab'_4, mcolor("${blue_3}") ciopts(color("${blue_3}"))) ///
							///, ///
							///bylabel("Top 25%" "SES schools") ///
							///||  ///
							(low_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							, ///
							bylabel("Bottom 25%" "SES schools") ///
							||  ///
							(young_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							, ///
							bylabel("`young_lab'") ///
							|| ///
							(old_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							, ///
							bylabel("`old_lab'") ///
							||  ///
							(first_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							, ///
							bylabel("Oldest child") ///
							||  ///
							(edu3_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							, ///
							bylabel("Mother with some level" "of Higher ed.") ///
							||  ///
							(one_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
							, ///
							bylabel("Lives with one parent") ///
							||  ///
							, ///
							keep(treated_post) ///
							xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
							///xlabel(`xmin'(0.02)0.02) ///
							xlabel(#5) ///								
							xline(0, lcolor(gs12)) ///
							///xline(`xlines', lcolor(gs15))  ///
							grid(none) ///
							bycoefs	
				
						
				*- All TWFE by # of siblings	
				di as result "*******" _n as text "About to graph (Value: ${covid_data})" _n as result "*******"
				
				if "${covid_data}" == "_TEST" {
					di "TEST"
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_summ_`level'_`only_covid'_`vlab'_`type'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES_TEMP\TWFE\covid_twfe_summ_`level'_`only_covid'_`vlab'_`type'_${max_sibs}${covid_data}.pdf", replace	
					}
				if "${covid_data}" == "" {
					di "REAL"
					capture qui graph export "$FIGURES\TWFE\covid_twfe_summ_`level'_`only_covid'_`vlab'_`type'_${max_sibs}${covid_data}.png", replace	
					capture qui graph export "$FIGURES\TWFE\covid_twfe_summ_`level'_`only_covid'_`vlab'_`type'_${max_sibs}${covid_data}.pdf", replace	
					}	 				
			}
		}
	}
end


capture program drop twfe_placebo_grades
program define twfe_placebo_grades	
		
args type
	
	clear

	*- TWFE Estimates

	foreach v in /*"std_gpa_m" "std_gpa_c"*/ "std_gpa_m_adj" "std_gpa_c_adj" "pass_math" "pass_read" /*"approved" "approved_first"*/ {
		foreach only_covid in "all" "20_21" {
			foreach level in "all" "elm" "sec" {
			
			if ${covid_test} == 1 & inlist("`v'","std_gpa_m_adj","pass_math")==0 	continue
			if ${covid_test} == 1 & inlist("`level'","sec")==1 						continue
			if ${covid_test} == 1 & inlist("`only_covid'","all")==1 				continue
			if inlist("`v'","std_gpa_c_adj","pass_read")==1 & "`level'"!="elm" 		continue //until final version, not needed.
			if inlist("`v'","std_gpa_c_adj","pass_read")==1 & "`only_covid'"!="all" continue //until final version, not needed.
			if inlist("`v'","prim_on_time")==1 				& "`only_covid'"=="all" continue //testing for now so no need to do it all	
			
			estimates clear
			global x = "$x_all"
			if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
			

			use `v' pass_math pass_read approved approved_first id_per_umc year_t_?? public_siagie urban_siagie male_siagie educ_cat_mother higher_ed_parent lives_with_mother lives_with_father *has_internet *has_comp *low_ses *quiet_room year grade treated post treated_post id_ie fam_order_${fam_type} fam_total_${fam_type} ${x} using "$TEMP\pre_reg_covid${covid_data}", clear
				
			*- School has internet
			merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)
					
			if "`type'"=="internet" {
				drop treated treated_post
				gen treated = internet==1
				gen treated_post = treated*post
				local lab_control = "No Internet"
				local lab_treated = "Internet"
			}	

			if "`type'"=="parent_ed" {
				drop treated treated_post
				gen treated = (educ_cat_mother==3)
				gen treated_post = treated*post
				local lab_control = "Mother no higher ed."
				local lab_treated = "Mother some higher ed."
			}

			if "`type'"=="both_parents" {
				drop treated treated_post
				gen treated = (lives_with_mother==1 & lives_with_father==1)
				gen treated_post = treated*post
				local lab_control = "Does not live with both"
				local lab_treated = "Lives with both parents"
			}				
			
			*- Remove early grades and years
			keep if year>=2016
			drop if grade==0
			
			*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
			if "`only_covid'" == "20_21" keep if year<=2021
			
			
			*- Divide sample based on grade in 2020
			//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
			
			*- Divide sample based on expected cohort
			bys id_per_umc: egen min_year 		= min(year)
			bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
			gen proxy_1st = min_year - grade_min_year  + 1
			
			if "`level'" == "all" {
				keep if grade>=1 & grade<=11
				//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
				gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
				local young_lab = "Primary" //Primary in 2020
				local old_lab 	= "Secondary"
				}
			if "`level'" == "elm" {
				keep if grade>=1 & grade<=6
				//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
				//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
				//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
				//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
				gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
				local young_lab = "1st-3rd grade"
				local old_lab 	= "4th-6th grade"
				}
			if "`level'" == "sec" {
				keep if grade>=7	
				//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
				//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
				//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
				//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
				gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
				local young_lab = "7th-8th grade"
				local old_lab 	= "9th-11th grade"
				}

			local vlab = "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files	
			if "`v'" == "std_gpa_m" 		local vlab = "gpa_m"
			if "`v'" == "std_gpa_c" 		local vlab = "gpa_c"
			if "`v'" == "std_gpa_m_adj" 	local vlab = "gpa_m_adj"
			if "`v'" == "std_gpa_c_adj" 	local vlab = "gpa_c_adj"					
			if "`v'" == "pass_math" 		local vlab = "pass_m"				
			if "`v'" == "pass_read" 		local vlab = "pass_c"				
			if "`v'" == "approved" 			local vlab = "pass"
			if "`v'" == "approved_first" 	local vlab = "passf"
			if "`v'" == "higher_ed_parent" 	local vlab = "hed_parent"
	
			* All students
			di as result "*******" _n as text "All" _n as result "*******"
			reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 , a(grade year id_ie)
			estimates store all_`vlab'
				
			if "`level'" == "all" {
				forvalues g = 1(1)11 {
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==`g' , a(grade year id_ie)
				estimates store g`g'_`vlab'
				}
				
			
			if inlist("`v'","std_gpa_m","std_gpa_c","std_gpa_m_adj","std_gpa_c_adj")==1 {
				local xmin = -0.1
				local xlines = "-.1 -.08 -.06 -.04 -.02 .02"
			}
			if inlist("`v'","pass_math","pass_read")==1 {
				local xmin = -0.04
				local xlines = "-.04 -.02 .02"
			}
				
			coefplot 	(all_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("All Students") ///
						|| ///
						(g1_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("1st grade") ///	
						|| ///
						(g2_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("2nd grade") ///		
						|| ///
						(g3_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						,  ///
						bylabel("3rd grade") ///		
						|| ///
						(g4_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("4th grade") ///		
						|| ///
						(g5_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("5th grade") ///		
						|| ///
						(g6_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("6th grade") ///		
						|| ///
						(g7_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("7th grade") ///		
						|| ///
						(g8_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("8th grade") ///		
						|| ///
						(g9_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("9th grade") ///		
						|| ///
						(g10_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("10th grade") ///
						|| ///
						(g11_`vlab', mcolor("${blue_1}") ciopts(color("${blue_1}"))) ///
						, ///
						bylabel("11th grade") ///	
						||  ///
						, ///
						keep(treated_post) ///
						///legend(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'") col(3) pos(6)) ///
						xtitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///
						///xlabel(`xmin'(0.02)0.02) ///
						xlabel(#5) ///								
						xline(0, lcolor(gs12)) ///
						///xline(`xlines', lcolor(gs15))  ///
						grid(none) ///
						bycoefs	
				
				
						
				//graph save "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.gph" , replace	
				//capture qui graph export "$FIGURES\covid_twfe_`level'_`vlab'_${max_sibs}.eps", replace	
				capture qui graph export "$FIGURES\TWFE\covid_twfe_grades_`vlab'_`type'_${max_sibs}${covid_data}.png", replace	
				capture qui graph export "$FIGURES\TWFE\covid_twfe_grades_`vlab'_`type'_${max_sibs}${covid_data}.pdf", replace					
				
				}
				
			}
		}
	}

end


*----------------
*- TWFE: 2nd, 4th, 8th
*----------------


capture program drop twfe_2_4_6_8
program define twfe_2_4_6_8


args treatment_type subsample only_covid level      //treatment_type: treatment type (generally by # of siblings). 

capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"		

capture assert inlist("`only_covid'","all","20_21")==1
if _rc!=0 di "Need to select post_year: can be -all- or -20_21-"		 
	clear

	
	local v = "std_gpa_m_adj"
	//local only_covid = "`post_years'"
	local level = "all"
	
					
				if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
				if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
				if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue

				estimates clear
				global x = "$x_all"
				if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
				
				use ///
				/*OUTCOME*/		`v' std_gpa_m_adj std_gpa_c_adj ///
				/*ID*/ 			id_ie id_per_umc year grade ///
				/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
				/*DID*/			treated post treated_post ///
				/*EVENT*/		year_t_?? ///
				/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
				/*A*/ 			min_socioec_index_ie_cat quart_class_size quart_grade_size /*OTHER IN DEMOG*/ ///
				/*B*/			/*GRADE AND MALE*/ ///
				/*C*/			///closest_age_gap* ///
				/*D*/			educ_cat_mother /*higher_ed_parent*/ lives_with_mother lives_with_father ///
				/*Other*/		age_mother_1st_oldest_${fam_type} /**has_internet *has_comp *low_ses *quiet_room*/ ///
				using "$TEMP\pre_reg_covid${covid_data}", clear
				
				*- School has internet
				merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)

				
				if "`treatment_type'"=="internet" {
					drop treated treated_post
					gen treated = internet==1
					gen treated_post = treated*post
					local lab_control = "No Internet"
					local lab_treated = "Internet"
				}	

				if "`treatment_type'"=="parent_ed" {
					drop treated treated_post
					gen treated = (educ_cat_mother==3)
					gen treated_post = treated*post
					local lab_control = "Mother no higher ed."
					local lab_treated = "Mother some higher ed."
				}

				if "`treatment_type'"=="both_parents" {
					drop treated treated_post
					gen treated = (lives_with_mother==1 & lives_with_father==1)
					gen treated_post = treated*post
					local lab_control = "Does not live with both"
					local lab_treated = "Lives with both parents"
				}	
				
				if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
				if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
				if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
				if "`subsample'" == "all" 		di "All siblings"
					
				*- Remove early grades and years
				keep if year>=2014
				drop if grade==0
				
				*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
				if "`only_covid'" == "20_21" keep if year<=2021
				
				*- Divide sample based on grade in 2020
				//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
				
				*- Divide sample based on expected cohort
				bys id_per_umc: egen min_year 		= min(year)
				bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
				gen proxy_1st = min_year - grade_min_year  + 1
								
				
				/*
				*- Not enough pre-years
							
				drop if inlist(grade_2020,1,2)==1
				drop if grade_2020==3 & year<=2017 //<=2017 Would only include those who repeated..
				drop if grade_2020==4 & year<=2016 //<=2016 Would only include those who repeated..
				keep if proxy_1st <= 2018
				*/
				
				
				/*
				if "`area'" == "rur" keep if urban_siagie == 0
				if "`area'" == "urb" keep if urban_siagie == 1

				if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
				if "`hed_parent'" == "yes" 	keep if higher_ed_parent == 1
				*/
				
				if "`level'" == "all" {
					keep if grade>=1 & grade<=11
					//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
					gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
					local young_lab = "Primary" //Primary in 2020
					local old_lab 	= "Secondary"
					}
				if "`level'" == "elm" {
					keep if grade>=1 & grade<=6
					//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
					//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
					//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
					//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
					gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
					local young_lab = "1st-3rd grade"
					local old_lab 	= "4th-6th grade"
					}
				if "`level'" == "sec" {
					keep if grade>=7	
					//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
					//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
					//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
					gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
					local young_lab = "7th-8th grade"
					local old_lab 	= "9th-11th grade"
					}

				local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				if "`v'" == "std_gpa_m" 		{
					local vlab = "gpa_m"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c" 		{
					local vlab = "gpa_c"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "std_gpa_m_adj" 		{
					local vlab = "gpa_m_adj"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c_adj" 		{
					local vlab = "gpa_c_adj"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "pass_math" 		{
					local vlab = "pass_m"
					local xtitle = "% A's Mathematics"
					}
				if "`v'" == "pass_read" 		{
					local vlab = "pass_c"
					local xtitle = "% A's Reading"
					}
				if "`v'" == "approved" 		{
					local vlab = "pass"
					local xtitle = "Grade Promotion"
					}
				if "`v'" == "approved_first" 		{
					local vlab = "passf"
					local xtitle = "Grade Promotion without recovery"
					}
				if "`v'" == "higher_ed_parent" 		{
					local vlab = "hed_parent"
					local xtitle = "% Parent with higher education"
					}
		
		
				gen age_mom_cat = .
				replace age_mom_cat = 1 if age_mother_1st_oldest_2<30 & age_mother_1st_oldest_2!=.
				replace age_mom_cat = 2 if age_mother_1st_oldest_2>=30 & age_mother_1st_oldest_2<50 & age_mother_1st_oldest_2!=.
				replace age_mom_cat = 3 if age_mother_1st_oldest_2>=50 & age_mother_1st_oldest_2!=.

				
								
				*- Estimate Math & Reading: 2nd, 4th and 8th grade.

				reghdfe std_gpa_m_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==2 , a(grade year id_ie)
				estimates store m2
				reghdfe std_gpa_c_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==2 , a(grade year id_ie)
				estimates store c2
				reghdfe std_gpa_m_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==4 , a(grade year id_ie)
				estimates store m4
				reghdfe std_gpa_c_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==4 , a(grade year id_ie)
				estimates store c4
				reghdfe std_gpa_m_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==6 , a(grade year id_ie)
				estimates store m6
				reghdfe std_gpa_c_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==6 , a(grade year id_ie)
				estimates store c6				
				reghdfe std_gpa_m_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==8 , a(grade year id_ie)
				estimates store m8
				reghdfe std_gpa_c_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==8 , a(grade year id_ie)
				estimates store c8		
							
				coefplot 	(m2, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50")	ciopts(color("${blue_1}"))) ///
							(c2, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
							, ///
							bylabel("2nd grade") ///
							|| ///
							(m4, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50") 	ciopts(color("${blue_1}"))) ///
							(c4, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
							, ///
							bylabel("4th grade") ///
							|| ///
							(m6, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50") 	ciopts(color("${blue_1}"))) ///
							(c6, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
							, ///
							bylabel("6th grade") ///	
							|| ///
							(m8, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50") 	ciopts(color("${blue_1}"))) ///
							(c8, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
							, ///
							bylabel("8th grade") ///		
							|| ///
							, ///
							vertical ///
							recast(bar) barwidth(0.25) ///
							ciopts(recast(rcap)) citop ///
							xlabel(1 "2nd grade" 2 "4th grade" 3 "6th grade" 4 "8th grade") ///	
							keep(treated_post) ///
							legend(order(1 "Mathematics" 3 "Reading") col(3) pos(6)) ///
							ytitle("Standardized GPA relative to Only Children", size(medsmall) height(5)) ///							
							///xline(0, lcolor(gs12)) ///
							ylabel(-0.06(0.01)0.01) ///
							yline(0, lcolor(gs0) lpattern(dash)) ///
							grid(none) ///
							bycoefs 

					
					if "${covid_data}" == "_TEST" {
						di "TEST"
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_gpa_2_4_6_8_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_gpa_2_4_6_8_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace	
						}
					if "${covid_data}" == "" {
						di "REAL"
						capture qui graph export "$FIGURES\TWFE\twfe_gpa_2_4_6_8_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES\TWFE\twfe_gpa_2_4_6_8_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace
						}								
					
end
		



*----------------
*- TWFE: Age Gap
*----------------


capture program drop twfe_age_gap
program define twfe_age_gap


args treatment_type subsample only_covid level      //treatment_type: treatment type (generally by # of siblings). 

capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"		

capture assert inlist("`only_covid'","all","20_21")==1
if _rc!=0 di "Need to select post_year: can be -all- or -20_21-"		 
	clear

	
	local v = "std_gpa_m_adj"
	//local only_covid = "`post_years'"
	//local level = "all"
	
					
				if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
				if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
				if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue

				estimates clear
				global x = "$x_all"
				if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
				
				use ///
				/*OUTCOME*/		`v' std_gpa_m_adj std_gpa_c_adj ///
				/*ID*/ 			id_ie id_per_umc year grade ///
				/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
				/*DID*/			treated post treated_post ///
				/*EVENT*/		year_t_?? ///
				/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
				/*A*/ 			min_socioec_index_ie_cat quart_class_size quart_grade_size /*OTHER IN DEMOG*/ ///
				/*B*/			/*GRADE AND MALE*/ ///
				/*C*/			closest_age_gap* ///
				/*D*/			educ_cat_mother /*higher_ed_parent*/ lives_with_mother lives_with_father ///
				/*Other*/		age_mother_1st_oldest_${fam_type} /**has_internet *has_comp *low_ses *quiet_room*/ ///
				using "$TEMP\pre_reg_covid${covid_data}", clear
				
				*- School has internet
				merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)

				
				if "`treatment_type'"=="internet" {
					drop treated treated_post
					gen treated = internet==1
					gen treated_post = treated*post
					local lab_control = "No Internet"
					local lab_treated = "Internet"
				}	

				if "`treatment_type'"=="parent_ed" {
					drop treated treated_post
					gen treated = (educ_cat_mother==3)
					gen treated_post = treated*post
					local lab_control = "Mother no higher ed."
					local lab_treated = "Mother some higher ed."
				}

				if "`treatment_type'"=="both_parents" {
					drop treated treated_post
					gen treated = (lives_with_mother==1 & lives_with_father==1)
					gen treated_post = treated*post
					local lab_control = "Does not live with both"
					local lab_treated = "Lives with both parents"
				}	
				
				if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
				if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
				if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
				if "`subsample'" == "all" 		di "All siblings"
					
				*- Remove early grades and years
				keep if year>=2014
				drop if grade==0
				
				*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
				if "`only_covid'" == "20_21" keep if year<=2021
				
				*- Divide sample based on grade in 2020
				//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
				
				*- Divide sample based on expected cohort
				bys id_per_umc: egen min_year 		= min(year)
				bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
				gen proxy_1st = min_year - grade_min_year  + 1
								
				
				/*
				*- Not enough pre-years
							
				drop if inlist(grade_2020,1,2)==1
				drop if grade_2020==3 & year<=2017 //<=2017 Would only include those who repeated..
				drop if grade_2020==4 & year<=2016 //<=2016 Would only include those who repeated..
				keep if proxy_1st <= 2018
				*/
				
				
				/*
				if "`area'" == "rur" keep if urban_siagie == 0
				if "`area'" == "urb" keep if urban_siagie == 1

				if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
				if "`hed_parent'" == "yes" 	keep if higher_ed_parent == 1
				*/
				
				if "`level'" == "all" {
					keep if grade>=1 & grade<=11
					//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
					gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
					local young_lab = "Primary" //Primary in 2020
					local old_lab 	= "Secondary"
					}
				if "`level'" == "elm" {
					keep if grade>=1 & grade<=6
					//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
					//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
					//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
					//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
					gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
					local young_lab = "1st-3rd grade"
					local old_lab 	= "4th-6th grade"
					}
				if "`level'" == "sec" {
					keep if grade>=7	
					//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
					//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
					//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
					gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
					local young_lab = "7th-8th grade"
					local old_lab 	= "9th-11th grade"
					}

				local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				if "`v'" == "std_gpa_m" 		{
					local vlab = "gpa_m"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c" 		{
					local vlab = "gpa_c"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "std_gpa_m_adj" 		{
					local vlab = "gpa_m_adj"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c_adj" 		{
					local vlab = "gpa_c_adj"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "pass_math" 		{
					local vlab = "pass_m"
					local xtitle = "% A's Mathematics"
					}
				if "`v'" == "pass_read" 		{
					local vlab = "pass_c"
					local xtitle = "% A's Reading"
					}
				if "`v'" == "approved" 		{
					local vlab = "pass"
					local xtitle = "Grade Promotion"
					}
				if "`v'" == "approved_first" 		{
					local vlab = "passf"
					local xtitle = "Grade Promotion without recovery"
					}
				if "`v'" == "higher_ed_parent" 		{
					local vlab = "hed_parent"
					local xtitle = "% Parent with higher education"
					}
		
		
				gen age_mom_cat = .
				replace age_mom_cat = 1 if age_mother_1st_oldest_2<30 & age_mother_1st_oldest_2!=.
				replace age_mom_cat = 2 if age_mother_1st_oldest_2>=30 & age_mother_1st_oldest_2<50 & age_mother_1st_oldest_2!=.
				replace age_mom_cat = 3 if age_mother_1st_oldest_2>=50 & age_mother_1st_oldest_2!=.

				
				
			
				*- Gap <=2
				di as result "*******" _n as text "Close Age sibling (<=2 year difference)" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & ((closest_age_gap_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
				estimates store g02_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & ((closest_age_gap_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
				estimates store g02_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((closest_age_gap_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
				estimates store g02_`vlab'_3
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((closest_age_gap_2<=2 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
				estimates store g02_`vlab'_4
				
				
				*- Gap 3-5
				di as result "*******" _n as text "Close Age sibling (3-5 year difference)" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & ((closest_age_gap_2>=3 & closest_age_gap_2<=5 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
				estimates store g35_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & ((closest_age_gap_2>=3 & closest_age_gap_2<=5 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
				estimates store g35_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((closest_age_gap_2>=3 & closest_age_gap_2<=5 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
				estimates store g35_`vlab'_3
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((closest_age_gap_2>=3 & closest_age_gap_2<=5 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
				estimates store g35_`vlab'_4
				

				*- Gap 6+
				di as result "*******" _n as text "Close Age sibling (>=6 year difference)" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & ((closest_age_gap_2>=6 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
				estimates store g6m_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & ((closest_age_gap_2>=6 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1)), a(grade year id_ie)
				estimates store g6m_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & ((closest_age_gap_2>=6 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
				estimates store g6m_`vlab'_3
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & ((closest_age_gap_2>=6 & fam_total_${fam_type}>1) | (fam_total_${fam_type}==1))  , a(grade year id_ie)
				estimates store g6m_`vlab'_4						
				
				coefplot 	(g02_gpa_m_adj, mcolor(gs0) 	fcolor(gs0%50)	lcolor(gs0%50)	ciopts(color(gs0))) ///
							, ///
							bylabel("Sibling within 0-2 age gap") ///
							|| ///
							(g35_gpa_m_adj, mcolor(gs0) 	fcolor(gs0%50)	lcolor(gs0%50)	ciopts(color(gs0))) ///
							, ///
							bylabel("Sibling within 3-5 age gap") ///
							|| ///
							(g6m_gpa_m_adj, mcolor(gs0) 	fcolor(gs0%50)	lcolor(gs0%50)	ciopts(color(gs0))) ///
							, ///
							bylabel("Sibling beyond 6+ age gap") ///
							|| ///
							, ///
							vertical ///
							recast(bar) barwidth(0.25) ///
							ciopts(recast(rcap)) citop ///
							xlabel(1 "Sibling within 0-2 age gap" 2 "Sibling within 3-5 age gap" 3 "Sibling beyond 6+ age gap") ///	
							keep(treated_post) ///
							///legend(order(1 "1 sibling" 3 "2 siblings" 5 "3 siblings") col(3) pos(6)) ///
							legend(off) ///
							ytitle("Standardized Mathematics GPA" "relative to Only Children", size(medsmall) height(5)) ///							
							///xline(0, lcolor(gs12)) ///
							ylabel(-0.06(0.01)0.01) ///
							yline(0, lcolor(gs0) lpattern(dash)) ///
							grid(none) ///
							bycoefs 

					
					if "${covid_data}" == "_TEST" {
						di "TEST"
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_gpa_age_gap_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_gpa_age_gap_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace	
						}
					if "${covid_data}" == "" {
						di "REAL"
						capture qui graph export "$FIGURES\TWFE\twfe_gpa_age_gap_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES\TWFE\twfe_gpa_age_gap_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace
						}
						
							
				coefplot 	(g02_gpa_m_adj_2, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50")	ciopts(color("${blue_1}"))) ///
							(g02_gpa_m_adj_3, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
							(g02_gpa_m_adj_4, mcolor("${green_1}") 	fcolor("${green_1}%50")	lcolor("${green_1}%50") 	ciopts(color("${green_1}"))) ///
							, ///
							bylabel("Sibling within 0-2 age gap") ///
							|| ///
							(g35_gpa_m_adj_2, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50")	ciopts(color("${blue_1}"))) ///
							(g35_gpa_m_adj_3, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
							(g35_gpa_m_adj_4, mcolor("${green_1}") 	fcolor("${green_1}%50")	lcolor("${green_1}%50") 	ciopts(color("${green_1}"))) ///
							, ///
							bylabel("Sibling within 3-5 age gap") ///
							|| ///
							(g6m_gpa_m_adj_2, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50")	ciopts(color("${blue_1}"))) ///
							(g6m_gpa_m_adj_3, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
							(g6m_gpa_m_adj_4, mcolor("${green_1}") 	fcolor("${green_1}%50")	lcolor("${green_1}%50") 	ciopts(color("${green_1}"))) ///
							, ///
							bylabel("Sibling beyond 6+ age gap") ///
							|| ///
							, ///
							vertical ///
							recast(bar) barwidth(0.25) ///
							ciopts(recast(rcap)) citop ///
							xlabel(1 "Sibling within 0-2 age gap" 2 "Sibling within 3-5 age gap" 3 "Sibling beyond 6+ age gap") ///	
							keep(treated_post) ///
							legend(order(1 "1 sibling" 3 "2 siblings" 5 "3 siblings") col(3) pos(6)) ///
							ytitle("Standardized Mathematics GPA" "relative to Only Children", size(medsmall) height(5)) ///							
							///xline(0, lcolor(gs12)) ///
							ylabel(-0.06(0.01)0.01) ///
							yline(0, lcolor(gs0) lpattern(dash)) ///
							grid(none) ///
							bycoefs 

					
					if "${covid_data}" == "_TEST" {
						di "TEST"
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_gpa_age_gap_bysibs_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_gpa_age_gap_bysibs_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace	
						}
					if "${covid_data}" == "" {
						di "REAL"
						capture qui graph export "$FIGURES\TWFE\twfe_gpa_age_gap_bysibs_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES\TWFE\twfe_gpa_age_gap_bysibs_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace
						}								
					
end
		




*----------------
*- TWFE: Age Gap
*----------------


capture program drop twfe_dual
program define twfe_dual


args treatment_type subsample only_covid level category     //treatment_type: treatment type (generally by # of siblings). 

capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"		

capture assert inlist("`only_covid'","all","20_21")==1
if _rc!=0 di "Need to select post_year: can be -all- or -20_21-"		 
	
capture assert inlist("`category'","lives_with_mother","mother_sec_complete")==1	
if _rc!=0 di "Need to select category: can be -lives_with_mother- or -mother_sec_complete-"
	
	
	clear

	
	local v = "std_gpa_m_adj"
	//local only_covid = "`post_years'"
	//local level = "all"
	
					
				if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
				if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
				if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue

				estimates clear
				global x = "$x_all"
				if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
				
				use ///
				/*OUTCOME*/		`v' std_gpa_m_adj std_gpa_c_adj ///
				/*ID*/ 			id_ie id_per_umc year grade ///
				/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
				/*DID*/			treated post treated_post ///
				/*EVENT*/		year_t_?? ///
				/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
				/*A*/ 			min_socioec_index_ie_cat quart_class_size quart_grade_size /*OTHER IN DEMOG*/ ///
				/*B*/			/*GRADE AND MALE*/ ///
				/*C*/			closest_age_gap* ///
				/*D*/			educ_cat_mother /*higher_ed_parent*/ lives_with_mother lives_with_father ///
				/*Other*/		age_mother_1st_oldest_${fam_type} /**has_internet *has_comp *low_ses *quiet_room*/ ///
				using "$TEMP\pre_reg_covid${covid_data}", clear
				
				*- School has internet
				merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)

				
				if "`treatment_type'"=="internet" {
					drop treated treated_post
					gen treated = internet==1
					gen treated_post = treated*post
					local lab_control = "No Internet"
					local lab_treated = "Internet"
				}	

				if "`treatment_type'"=="parent_ed" {
					drop treated treated_post
					gen treated = (educ_cat_mother==3)
					gen treated_post = treated*post
					local lab_control = "Mother no higher ed."
					local lab_treated = "Mother some higher ed."
				}

				if "`treatment_type'"=="both_parents" {
					drop treated treated_post
					gen treated = (lives_with_mother==1 & lives_with_father==1)
					gen treated_post = treated*post
					local lab_control = "Does not live with both"
					local lab_treated = "Lives with both parents"
				}	
				
				if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
				if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
				if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
				if "`subsample'" == "all" 		di "All siblings"
					
				*- Remove early grades and years
				keep if year>=2014
				drop if grade==0
				
				*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
				if "`only_covid'" == "20_21" keep if year<=2021
				
				*- Divide sample based on grade in 2020
				//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
				
				*- Divide sample based on expected cohort
				bys id_per_umc: egen min_year 		= min(year)
				bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
				gen proxy_1st = min_year - grade_min_year  + 1
								
				
				/*
				*- Not enough pre-years
							
				drop if inlist(grade_2020,1,2)==1
				drop if grade_2020==3 & year<=2017 //<=2017 Would only include those who repeated..
				drop if grade_2020==4 & year<=2016 //<=2016 Would only include those who repeated..
				keep if proxy_1st <= 2018
				*/
				
				
				/*
				if "`area'" == "rur" keep if urban_siagie == 0
				if "`area'" == "urb" keep if urban_siagie == 1

				if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
				if "`hed_parent'" == "yes" 	keep if higher_ed_parent == 1
				*/
				
				if "`level'" == "all" {
					keep if grade>=1 & grade<=11
					//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
					gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
					local young_lab = "Primary" //Primary in 2020
					local old_lab 	= "Secondary"
					}
				if "`level'" == "elm" {
					keep if grade>=1 & grade<=6
					//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
					//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
					//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
					//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
					gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
					local young_lab = "1st-3rd grade"
					local old_lab 	= "4th-6th grade"
					}
				if "`level'" == "sec" {
					keep if grade>=7	
					//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
					//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
					//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
					gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
					local young_lab = "7th-8th grade"
					local old_lab 	= "9th-11th grade"
					}

				local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				if "`v'" == "std_gpa_m" 		{
					local vlab = "gpa_m"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c" 		{
					local vlab = "gpa_c"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "std_gpa_m_adj" 		{
					local vlab = "gpa_m_adj"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c_adj" 		{
					local vlab = "gpa_c_adj"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "pass_math" 		{
					local vlab = "pass_m"
					local xtitle = "% A's Mathematics"
					}
				if "`v'" == "pass_read" 		{
					local vlab = "pass_c"
					local xtitle = "% A's Reading"
					}
				if "`v'" == "approved" 		{
					local vlab = "pass"
					local xtitle = "Grade Promotion"
					}
				if "`v'" == "approved_first" 		{
					local vlab = "passf"
					local xtitle = "Grade Promotion without recovery"
					}
				if "`v'" == "higher_ed_parent" 		{
					local vlab = "hed_parent"
					local xtitle = "% Parent with higher education"
					}
		
		
				gen age_mom_cat = .
				replace age_mom_cat = 1 if age_mother_1st_oldest_2<30 & age_mother_1st_oldest_2!=.
				replace age_mom_cat = 2 if age_mother_1st_oldest_2>=30 & age_mother_1st_oldest_2<50 & age_mother_1st_oldest_2!=.
				replace age_mom_cat = 3 if age_mother_1st_oldest_2>=50 & age_mother_1st_oldest_2!=.

				gen mom_sec_complete = (inlist(educ_cat_mother,2,3)==1) if educ_cat_mother!=.
				
				if "`category'" == "lives_with_mother" 	{
					local cat0_lab = "Does not live with mother"
					local cat1_lab = "Lives with mother"
				}
				if "`category'" == "mom_sec_complete" 	{
					local cat0_lab = "Mother did not complete secondary"
					local cat1_lab = "Mother completed secondary"
				}
				
				*- Does not live with mom
				di as result "*******" _n as text "Does not live with mother" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & `category'==0, a(grade year id_ie)
				estimates store cat0_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & `category'==0, a(grade year id_ie)
				estimates store cat0_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & `category'==0  , a(grade year id_ie)
				estimates store cat0_`vlab'_3
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & `category'==0  , a(grade year id_ie)
				estimates store cat0_`vlab'_4
				
				*- Does not live with mom
				di as result "*******" _n as text "Lives with mother" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2,3,4)==1 & `category'==1, a(grade year id_ie)
				estimates store cat1_`vlab'
				reghdfe `v' 	treated_post post treated ${x} if inlist(fam_total_${fam_type},1,2)==1 & `category'==1, a(grade year id_ie)
				estimates store cat1_`vlab'_2
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,3)==1 & `category'==1  , a(grade year id_ie)
				estimates store cat1_`vlab'_3
				reghdfe `v'		treated_post post treated ${x} if inlist(fam_total_${fam_type},1,4)==1 & `category'==1  , a(grade year id_ie)
				estimates store cat1_`vlab'_4						
				
				coefplot 	(cat0_gpa_m_adj, mcolor(gs0) 	fcolor(gs0%50)	lcolor(gs0%50)	ciopts(color(gs0))) ///
							, ///
							bylabel("`cat0_lab'") ///
							|| ///
							(cat1_gpa_m_adj, mcolor(gs0) 	fcolor(gs0%50)	lcolor(gs0%50)	ciopts(color(gs0))) ///
							, ///
							bylabel("`cat1_lab'") ///
							|| ///
							, ///
							vertical ///
							recast(bar) barwidth(0.25) ///
							ciopts(recast(rcap)) citop ///
							xlabel(1 "`cat0_lab'" 2 "`cat1_lab'") ///	
							keep(treated_post) ///
							///legend(order(1 "1 sibling" 3 "2 siblings" 5 "3 siblings") col(3) pos(6)) ///
							legend(off) ///
							ytitle("Standardized Mathematics GPA" "relative to Only Children", size(medsmall) height(5)) ///							
							///xline(0, lcolor(gs12)) ///
							ylabel(-0.06(0.01)0.01) ///
							yline(0, lcolor(gs0) lpattern(dash)) ///
							grid(none) ///
							bycoefs 

					
					if "${covid_data}" == "_TEST" {
						di "TEST"
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_gpa_`category'_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_gpa_`category'_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace	
						}
					if "${covid_data}" == "" {
						di "REAL"
						capture qui graph export "$FIGURES\TWFE\twfe_gpa_`category'_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES\TWFE\twfe_gpa_`category'_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace
						}
						
							
				coefplot 	(cat0_gpa_m_adj_2, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50")	ciopts(color("${blue_1}"))) ///
							(cat0_gpa_m_adj_3, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
							(cat0_gpa_m_adj_4, mcolor("${green_1}") 	fcolor("${green_1}%50")	lcolor("${green_1}%50") 	ciopts(color("${green_1}"))) ///
							, ///
							bylabel("`cat0_lab'") ///
							|| ///
							(cat1_gpa_m_adj_2, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50")	ciopts(color("${blue_1}"))) ///
							(cat1_gpa_m_adj_3, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
							(cat1_gpa_m_adj_4, mcolor("${green_1}") 	fcolor("${green_1}%50")	lcolor("${green_1}%50") 	ciopts(color("${green_1}"))) ///
							, ///
							bylabel("`cat1_lab'") ///
							|| ///
							, ///
							vertical ///
							recast(bar) barwidth(0.25) ///
							ciopts(recast(rcap)) citop ///
							xlabel(1 "`cat0_lab'" 2 "`cat1_lab'") ///	
							keep(treated_post) ///
							legend(order(1 "1 sibling" 3 "2 siblings" 5 "3 siblings") col(3) pos(6)) ///
							ytitle("Standardized Mathematics GPA" "relative to Only Children", size(medsmall) height(5)) ///							
							///xline(0, lcolor(gs12)) ///
							ylabel(-0.06(0.01)0.01) ///
							yline(0, lcolor(gs0) lpattern(dash)) ///
							grid(none) ///
							bycoefs 

					
					if "${covid_data}" == "_TEST" {
						di "TEST"
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_gpa_`category'_bysibs_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES_TEMP\TWFE\twfe_gpa_`category'_bysibs_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace	
						}
					if "${covid_data}" == "" {
						di "REAL"
						capture qui graph export "$FIGURES\TWFE\twfe_gpa_`category'_bysibs_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
						capture qui graph export "$FIGURES\TWFE\twfe_gpa_`category'_bysibs_`level'_`only_covid'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace
						}								
					
end
		


*-----------------
*-  TEST
*-----------------



capture program drop twfe_test
program define twfe_test


args treatment_type subsample       //treatment_type: treatment type (generally by # of siblings). 

capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"		


	clear

	
	local v = "std_gpa_m_adj"
	local only_covid = "all"
	local level = "all"
	
					
				if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
				if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
				if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue

				estimates clear
				global x = "$x_all"
				if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
				
				use ///
				/*OUTCOME*/		`v' std_gpa_m_adj std_gpa_c_adj ///
				/*ID*/ 			id_ie id_per_umc year grade ///
				/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
				/*DID*/			treated post treated_post ///
				/*EVENT*/		year_t_?? ///
				/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
				/*A*/ 			min_socioec_index_ie_cat quart_class_size quart_grade_size /*OTHER IN DEMOG*/ ///
				/*B*/			/*GRADE AND MALE*/ ///
				/*C*/			///closest_age_gap* ///
				/*D*/			educ_cat_mother /*higher_ed_parent*/ lives_with_mother lives_with_father ///
				/*Other*/		age_mother_1st_oldest_${fam_type} /**has_internet *has_comp *low_ses *quiet_room*/ ///
				using "$TEMP\pre_reg_covid${covid_data}", clear
				
				*- School has internet
				merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)
				drop _m
				
				if "`treatment_type'"=="internet" {
					drop treated treated_post
					gen treated = internet==1
					gen treated_post = treated*post
					local lab_control = "No Internet"
					local lab_treated = "Internet"
				}	

				if "`treatment_type'"=="parent_ed" {
					drop treated treated_post
					gen treated = (educ_cat_mother==3)
					gen treated_post = treated*post
					local lab_control = "Mother no higher ed."
					local lab_treated = "Mother some higher ed."
				}

				if "`treatment_type'"=="both_parents" {
					drop treated treated_post
					gen treated = (lives_with_mother==1 & lives_with_father==1)
					gen treated_post = treated*post
					local lab_control = "Does not live with both"
					local lab_treated = "Lives with both parents"
				}	
				
				if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
				if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
				if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
				if "`subsample'" == "all" 		di "All siblings"
					
				*- Remove early grades and years
				keep if year>=2014
				drop if grade==0
				
			*- Age of oldest (proxy)
					preserve
						use "$TEMP\id_siblings", clear
						//bys id_fam_${fam_type}: egen exp_entry_year_oldest = max(cond(fam_order_${fam_type}==1,exp_entry_year,.))
						//bys id_fam_${fam_type}: egen exp_entry_year_youngest = max(cond(fam_order_${fam_type}==fam_total_${fam_type},exp_entry_year,.))
						keep id_fam_${fam_type} id_per_umc exp_entry_year //exp_entry_year_oldest exp_entry_year_youngest
						tempfile exp_entry_year_siblings
						save `exp_entry_year_siblings', replace
					restore
					
					merge m:1 id_per_umc using `exp_entry_year_siblings', keepusing(id_fam_${fam_type} exp_entry_year /*exp_entry_year_oldest exp_entry_year_youngest*/) keep(master match) nogen				
				
				*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
				if "`only_covid'" == "20_21" keep if year<=2021
				
				*- Divide sample based on grade in 2020
				//bys id_per_umc: egen grade_2020	= min(cond(year==2020,grade,.))
				
				*- Divide sample based on expected cohort
				bys id_per_umc: egen min_year 		= min(year)
				bys id_per_umc: egen grade_min_year = min(cond(year==min_year,grade,.))
				gen proxy_1st = min_year - grade_min_year  + 1
								
				
				/*
				*- Not enough pre-years
							
				drop if inlist(grade_2020,1,2)==1
				drop if grade_2020==3 & year<=2017 //<=2017 Would only include those who repeated..
				drop if grade_2020==4 & year<=2016 //<=2016 Would only include those who repeated..
				keep if proxy_1st <= 2018
				*/
				
				
				/*
				if "`area'" == "rur" keep if urban_siagie == 0
				if "`area'" == "urb" keep if urban_siagie == 1

				if "`hed_parent'" == "no" 	keep if higher_ed_parent == 0
				if "`hed_parent'" == "yes" 	keep if higher_ed_parent == 1
				*/
				
				if "`level'" == "all" {
					keep if grade>=1 & grade<=11
					//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
					gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
					local young_lab = "Primary" //Primary in 2020
					local old_lab 	= "Secondary"
					}
				if "`level'" == "elm" {
					keep if grade>=1 & grade<=6
					//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
					//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
					//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
					//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
					gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
					local young_lab = "1st-3rd grade"
					local old_lab 	= "4th-6th grade"
					}
				if "`level'" == "sec" {
					keep if grade>=7	
					//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
					//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
					//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
					//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
					gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
					local young_lab = "7th-8th grade"
					local old_lab 	= "9th-11th grade"
					}

				local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
				if "`v'" == "std_gpa_m" 		{
					local vlab = "gpa_m"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c" 		{
					local vlab = "gpa_c"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "std_gpa_m_adj" 		{
					local vlab = "gpa_m_adj"
					local xtitle = "Standardized Mathematics GPA"
					}
				if "`v'" == "std_gpa_c_adj" 		{
					local vlab = "gpa_c_adj"
					local xtitle = "Standardized Reading GPA"
					}
				if "`v'" == "pass_math" 		{
					local vlab = "pass_m"
					local xtitle = "% A's Mathematics"
					}
				if "`v'" == "pass_read" 		{
					local vlab = "pass_c"
					local xtitle = "% A's Reading"
					}
				if "`v'" == "approved" 		{
					local vlab = "pass"
					local xtitle = "Grade Promotion"
					}
				if "`v'" == "approved_first" 		{
					local vlab = "passf"
					local xtitle = "Grade Promotion without recovery"
					}
				if "`v'" == "higher_ed_parent" 		{
					local vlab = "hed_parent"
					local xtitle = "% Parent with higher education"
					}
		
		
				gen age_mom_cat = .
				replace age_mom_cat = 1 if age_mother_1st_oldest_2<30 & age_mother_1st_oldest_2!=.
				replace age_mom_cat = 2 if age_mother_1st_oldest_2>=30 & age_mother_1st_oldest_2<50 & age_mother_1st_oldest_2!=.
				replace age_mom_cat = 3 if age_mother_1st_oldest_2>=50 & age_mother_1st_oldest_2!=.

drop _m

merge m:1 id_per_umc using "$TEMP\applied_students", keep(master match)

				
				assert 1==0



				di as result "*******" _n as text "WITH CONTROLS" _n as result "*******"
				local v = "std_gpa_m_adj"
				reghdfe `v' 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1  , a(grade year id_ie)
				estimates store reg0_controls

				di as result "*******" _n as text "WITHOUT CONTROLS" _n as result "*******"
				reghdfe `v' 	treated_post post treated  if inlist(fam_total_${fam_type},1,2,3,4)==1  , a(grade year id_ie)
				estimates store reg0_nocontrols	
				

				di as result "*******" _n as text "WITHOUT YEAR FE" _n as result "*******"
				reghdfe `v' 	treated_post post treated  if inlist(fam_total_${fam_type},1,2,3,4)==1  , a(grade id_ie)
				estimates store reg0_nocontrols_noyfe				
				
				di as result "*******" _n as text "WITH CONTROLS" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2)==1  , a(grade year id_ie)
				estimates store reg1_controls
				reghdfe `v'		treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,3)==1  , a(grade year id_ie)
				estimates store reg2_controls
				reghdfe `v'		treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,4)==1  , a(grade year id_ie)
				estimates store reg3_controls

				di as result "*******" _n as text "WITHOUT CONTROLS" _n as result "*******"
				reghdfe `v' 	treated_post post treated  if inlist(fam_total_${fam_type},1,2)==1  , a(grade year id_ie)
				estimates store reg1_nocontrols
				reghdfe `v'		treated_post post treated  if inlist(fam_total_${fam_type},1,3)==1  , a(grade year id_ie)
				estimates store reg2_nocontrols
				reghdfe `v'		treated_post post treated  if inlist(fam_total_${fam_type},1,4)==1  , a(grade year id_ie)
				estimates store reg3_nocontrols				

				di as result "*******" _n as text "WITHOUT YEAR FE" _n as result "*******"
				reghdfe `v' 	treated_post post treated  if inlist(fam_total_${fam_type},1,2)==1  , a(grade  id_ie)
				estimates store reg1_nocontrols_noyfe
				reghdfe `v'		treated_post post treated  if inlist(fam_total_${fam_type},1,3)==1  , a(grade  id_ie)
				estimates store reg2_nocontrols_noyfe
				reghdfe `v'		treated_post post treated  if inlist(fam_total_${fam_type},1,4)==1  , a(grade  id_ie)
				estimates store reg3_nocontrols_noyfe

				*****
				* Panel A: Confounders: Type of school
				*****		
				forvalues cat = 1(1)3 {
				
				di as result "*******" _n as text "Urban" _n as result "*******"
				reghdfe `v' 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & age_mom_cat==`cat' , a(grade year id_ie)
				estimates store age`cat'_`vlab'
				reghdfe `v' 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2)==1 & age_mom_cat==`cat' , a(grade year id_ie)
				estimates store age`cat'_`vlab'_2
				reghdfe `v'		treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,3)==1 & age_mom_cat==`cat'  , a(grade year id_ie)
				estimates store age`cat'_`vlab'_3
				reghdfe `v'		treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,4)==1 & age_mom_cat==`cat'  , a(grade year id_ie)
				estimates store age`cat'_`vlab'_4
				}
				
				
				
*- Estimate Math & Reading: 2nd, 4th and 8th grade.
bys id_per_umc: egen base_std_gpa_m_adj = max(cond(grade==2,std_gpa_m_adj,.))

reghdfe std_gpa_m_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==2 , a(grade year id_ie)
estimates store m2
reghdfe std_gpa_c_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==2 , a(grade year id_ie)
estimates store c2
reghdfe std_gpa_m_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==4 , a(grade year id_ie)
estimates store m4
reghdfe std_gpa_c_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==4 , a(grade year id_ie)
estimates store c4
reghdfe std_gpa_m_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==8 , a(grade year id_ie)
estimates store m8
reghdfe std_gpa_c_adj 	treated_post post treated ${x_all} if inlist(fam_total_${fam_type},1,2,3,4)==1 & grade==8 , a(grade year id_ie)
estimates store c8			
			
coefplot 	(m2, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50")	ciopts(color("${blue_1}"))) ///
			(c2, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
			, ///
			bylabel("2nd grade") ///
			|| ///
			(m4, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50") 	ciopts(color("${blue_1}"))) ///
			(c4, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
			, ///
			bylabel("4th grade") ///	
			|| ///
			(m8, mcolor("${blue_1}") 	fcolor("${blue_1}%50")	lcolor("${blue_1}%50") 	ciopts(color("${blue_1}"))) ///
			(c8, mcolor("${red_1}") 	fcolor("${red_1}%50")	lcolor("${red_1}%50") 	ciopts(color("${red_1}"))) ///
			, ///
			bylabel("8th grade") ///		
			|| ///
			, ///
			vertical ///
			recast(bar) barwidth(0.25) ///
			ciopts(recast(rcap)) citop ///
			xlabel(1 "2nd grade" 2 "4th grade" 3 "8th grade") ///	
			keep(treated_post) ///
			legend(order(1 "Mathematics" 3 "Reading") col(3) pos(6)) ///
			ytitle("`xtitle' relative to Only Children", size(medsmall) height(5)) ///							
			xline(0, lcolor(gs12)) ///
			grid(none) ///
			bycoefs 				
end
		
		

		

********************************************************************************
* Event Study - TEST
********************************************************************************

capture program drop event_test
program define event_test
	
	


args treatment_type subsample other_filters     //treatment_type: treatment type (generally by # of siblings). 

capture assert "`treatment_type'" != ""
if _rc!=0 di "Need to select type: usual is -siblings-"

capture assert "`subsample'" != ""
if _rc!=0 di "Need to select subsample: can be -all-"		



if ${max_sibs}==4 local legend_child_${max_sibs} = "4 children"	
if ${max_sibs}==4 local legend_sib_${max_sibs} = "3 siblings"	

*- GPA Overall 
estimates clear

clear

*- Event Study

local only_covid = "all"
local level = "all"
local v = "std_gpa_m_adj"

								di "`v' - `treatment_type' - `subsample' - `other_filters'"
							
							if ${main_outcomes} == 1 & inlist("`v'","${main_outcome_1}","${main_outcome_2}","${main_outcome_3}")!=1		continue
							if ${main_loop} 	== 1 & inlist("`level'","${main_loop_level}")!=1 										continue	
							if ${main_loop} 	== 1 & inlist("`only_covid'","${main_loop_only_covid}")!=1 								continue

							estimates clear
							global x = "$x_all"
							if "`v'" == "higher_ed_parent" global x = "$x_nohigher_ed"	
							
							use ///
							/*OUTCOME*/		`v'  ///
							/*ID*/ 			id_ie id_per_umc year grade ///
							/*FAMILY*/		fam_order_${fam_type} fam_total_${fam_type} ///
							/*DID*/			treated post treated_post ///
							/*EVENT*/		year_t_?? ///
							/*Demog*/		public_siagie urban_siagie male_siagie age_mother_1st_oldest_2 age_mother age_father educ_cat_mother educ_cat_father ${x_all_vars} ///
							/*A*/ 			min_socioec_index_ie_cat quart_class_size quart_grade_size /*OTHER IN DEMOG*/ ///
							/*B*/			/*GRADE AND MALE*/ ///
							/*C*/			///closest_age_gap* ///
							/*D*/			educ_cat_mother /*higher_ed_parent*/ lives_with_mother lives_with_father ///
							/*Other*/		/**has_internet *has_comp *low_ses *quiet_room*/ ///
							using "$TEMP\pre_reg_covid${covid_data}", clear
							
							*- School has internet
							merge m:1 id_ie using "$TEMP\school_internet", keepusing(codlocal internet) keep(master match)

							
							if "`treatment_type'"=="internet" {
								drop treated treated_post
								gen treated = internet==1
								gen treated_post = treated*post
								local lab_control = "No Internet"
								local lab_treated = "Internet"
							}	

							if "`treatment_type'"=="parent_ed" {
								drop treated treated_post
								gen treated = (educ_cat_mother==3)
								gen treated_post = treated*post
								local lab_control = "Mother no higher ed."
								local lab_treated = "Mother some higher ed."
							}

							if "`treatment_type'"=="both_parents" {
								drop treated treated_post
								gen treated = (lives_with_mother==1 & lives_with_father==1)
								gen treated_post = treated*post
								local lab_control = "Does not live with both"
								local lab_treated = "Lives with both parents"
							}	
							
							if "`subsample'" == "oldest" 	keep if fam_order_${fam_type} == 1
							if "`subsample'" == "youngest" 	keep if fam_order_${fam_type} == fam_total_${fam_type}
							if "`subsample'" == "middle" 	keep if (fam_total_${fam_type}==1 | (fam_total_${fam_type}>1 & fam_order_${fam_type}!=1 & fam_order_${fam_type}!=fam_total_${fam_type})) //famsize=1 or famsize>1 and not older or younger
							if "`subsample'" == "all" 		di "All siblings"
		
							*- Remove early grades and years
							keep if year>=2016
							drop if grade==0
							
							if "`level'" == "all" {
								keep if grade>=1 & grade<=11
								//gen young = inlist(grade_2020,3,4,5,6)==1 if inlist(grade_2020,3,4,5,6,7,8,9,10,11)
								//gen young = inlist(proxy_1st,2015,2016,2017,2018) if inlist(proxy_1st,2011,2012,2013,2014,2015,2016,2017,2018)==1
								gen young = inlist(grade,1,2,3,4,5,6)==1 if inlist(grade,1,2,3,4,5,6,7,8,9,10,11)
								local young_lab = "Primary" //Primary in 2020
								local old_lab 	= "Secondary"
								}
							if "`level'" == "elm" {
								keep if grade>=1 & grade<=6
								//gen young = inlist(grade_2020,3,4)==1 if inlist(grade_2020,3,4,5,6)
								//gen young = inlist(proxy_1st,2017,2018) if inlist(proxy_1st,2015,2016)==1
								//local young_lab = "2017-2018 cohort" //3rd-4th grade in 2020
								//local old_lab 	= "2015-2016 cohort" //5th-6th grade in 2020
								gen young = inlist(grade,1,2,3)==1 if inlist(grade,1,2,3,4,5,6)
								local young_lab = "1st-3rd grade"
								local old_lab 	= "4th-6th grade"
								}
							if "`level'" == "sec" {
								keep if grade>=7	
								//gen young = inlist(grade_2020,7,8)==1 if inlist(grade_2020,7,8,9,10,11)
								//gen young = inlist(proxy_1st,2014,2013) if inlist(proxy_1st,2011,2012)==1
								//local young_lab = "2014-2013 cohort" //7th-8th grade in 2020
								//local old_lab 	= "2011-2012 cohort" //9th-11th grade in 2020
								gen young = inlist(grade,7,8)==1 if inlist(grade,7,8,9,10,11)
								local young_lab = "7th-8th grade"
								local old_lab 	= "9th-11th grade"
								}							
							
							*- Keep only 2020-2021 (exclude 2022,2023,2024) from the TWFE estimates
							if "`only_covid'" == "20_21" keep if year<=2021			
							
							
							if strmatch("`other_filters'","*rural*")==1 		keep if urban_siagie==0
							if strmatch("`other_filters'","*urban*")==1 		keep if urban_siagie==1
							
							if strmatch("`other_filters'","*parent_nhed*")==1 	keep if higher_ed_parent == 0
							if strmatch("`other_filters'","*parent_hed*")==1 	keep if higher_ed_parent == 1	
							
							if strmatch("`other_filters'","*both*")==1 			keep if lives_with_mother==1 & lives_with_father==1
							if strmatch("`other_filters'","*notboth*")==1 		keep if (lives_with_mother==1 & lives_with_father==0) | (lives_with_mother==0 & lives_with_father==1) | (lives_with_mother==0 & lives_with_father==0)						
							
							if strmatch("`other_filters'","*young*")==1 		keep if young==1				
							if strmatch("`other_filters'","*old*")==1 			keep if young==0						
							
									
							/*		
							if "`res'" == "all" 		keep if 1==1
							if "`res'" == "alls" 		keep if has_internet!=.
							if "`res'" == "nint" 		keep if has_internet==0
							if "`res'" == "ncom" 		keep if has_comp==0
							if "`res'" == "lses" 		keep if low_ses==1
							if "`res'" == "nqui" 		keep if quiet_room==0
							*/
							
							local vlab 		= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
							local xtitle 	= "-999-" //to reset value and make sure we are assigning one. This because I had an issue by looping through new outcoms without adding the vlab and replacing wrong files.
							if "`v'" == "std_gpa_m" 		{
								local vlab = "gpa_m"
								local xtitle = "Standardized Mathematics GPA"
								}
							if "`v'" == "std_gpa_c" 		{
								local vlab = "gpa_c"
								local xtitle = "Standardized Reading GPA"
								}
							if "`v'" == "std_gpa_m_adj" 		{
								local vlab = "gpa_m_adj"
								local xtitle = "Standardized Mathematics GPA"
								}
							if "`v'" == "std_gpa_c_adj" 		{
								local vlab = "gpa_c_adj"
								local xtitle = "Standardized Reading GPA"
								}
							if "`v'" == "pass_math" 		{
								local vlab = "pass_m"
								local xtitle = "% A's Mathematics"
								}
							if "`v'" == "pass_read" 		{
								local vlab = "pass_c"
								local xtitle = "% A's Reading"
								}
							if "`v'" == "approved" 		{
								local vlab = "pass"
								local xtitle = "Grade Promotion"
								}
							if "`v'" == "approved_first" 		{
								local vlab = "passf"
								local xtitle = "Grade Promotion without recovery"
								}
							if "`v'" == "higher_ed_parent" 		{
								local vlab = "hed_parent"
								local xtitle = "% Parent with higher education"
								}	
										
						
							/*
							local res_lab = ""
							if "`res'" == "alls" local res_lab = "s"
							if "`res'" == "nint" local res_lab = "i"
							if "`res'" == "ncom" local res_lab = "c"
							if "`res'" == "lses" local res_lab = "l"
							if "`res'" == "nqui" local res_lab = "q"
							*/
							
							//merge m:1 id_ie using "$TEMP\siagie_ece_ie_obs", keep(master match) keepusing(`v'_*) nogen
							
							*- Event Study
							//OC vs size =2/3/4
							reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if fam_total_${fam_type}<=${max_sibs}, a(year grade id_ie)
							estimates store event_`vlab'
							
							//OC vs size =2
							reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(fam_total_${fam_type},1,2)==1 , a(year grade id_ie)
							estimates store event_`vlab'_2
							
							//OC vs size =3
							reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(fam_total_${fam_type},1,3)==1 , a(year grade id_ie)
							estimates store event_`vlab'_3
							
							if ${max_sibs} == 4 eststo event_`vlab'_4 :reghdfe `v' 			year_t_b? o.year_t_o1 year_t_a?  treated ${x} if inlist(fam_total_${fam_type},1,4)==1 , a(year grade id_ie)
						
							
							local drop_vars = ""
							if "`level'" == "elm" & strmatch("`other_filters'","*young*") local drop_vars = "year_t_b5 year_t_b4 year_t_b3"
						
							coefplot 	(event_`vlab', drop(year_t_b6 `drop_vars') mcolor(gs0) ciopts(bcolor(gs0%20)) lcolor(gs0) cirecast(rarea)) ///
										, ///
										omitted ///
										keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
										drop(year_t_b6 year_t_b5 year_t_b4) ///
										///leg(order(1 "Children with siblings" 3 "1 sibling" 5 "2 siblings" 7 "`legend_sib_${max_sibs}'")) ///
										coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
										yline(0,  lcolor(gs10))  ///
										ytitle("`xtitle'") ///
										ylab(-.1(.02).04) ///
										///xline(2019.5 2021.5) ///
										subtitle("`tlab'") ///
										legend(pos(6) col(4))
					
							capture qui graph export "$FIGURES\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
							capture qui graph export "$FIGURES\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace	
							
							coefplot 	(event_`vlab'_2, drop(year_t_b6 `drop_vars') mcolor("${ek_blue}") ciopts(bcolor("${ek_blue}%30")) lcolor("${ek_blue}") cirecast(rarea)) ///
										, ///
										omitted ///
										keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
										drop(year_t_b6 year_t_b5 year_t_b4) ///
										///leg(order(1 "Children with siblings" 3 "1 sibling" 5 "2 siblings" 7 "`legend_sib_${max_sibs}'")) ///
										coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
										yline(0,  lcolor(gs10))  ///
										ytitle("`xtitle'") ///
										ylab(-.1(.02).04) ///
										///xline(2019.5 2021.5) ///
										subtitle("`tlab'") ///
										legend(pos(6) col(4))
					
							capture qui graph export "$FIGURES\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_2_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
							capture qui graph export "$FIGURES\Event Study\covid_event_`level'_`only_covid'_`v'_T`treatment_type'_2_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace								
							
							coefplot 	///(e`vlab'_`area_lab'_`lives_lab'_`hed_lab'_`level_lab'`young'_`res_lab'1, drop(year_t_b6 `drop_vars') mcolor(gs0) ciopts(bcolor(gs0)) lcolor(gs0)) ///
										(event_`vlab'_2, drop(year_t_b6 `drop_vars') mcolor("${ek_blue}") 	ciopts(bcolor("${ek_blue}%30")) 	lcolor("${ek_blue}") cirecast(rarea)) ///
										(event_`vlab'_3, drop(year_t_b6 `drop_vars') mcolor("${ek_green}") 	ciopts(bcolor("${ek_green}%30")) 	lcolor("${ek_green}") cirecast(rarea)) ///
										(event_`vlab'_4, drop(year_t_b6 `drop_vars') mcolor("${ek_red}") 	ciopts(bcolor("${ek_red}%30")) 	lcolor("${ek_red}") cirecast(rarea)) ///
										, ///
										omitted ///
										keep(year_t_??) msy(O) msize(1.5) vert recast(connected) ciopts(recast(rcap)) offset(0) ///
										drop(year_t_b6 year_t_b5 year_t_b4) ///
										///leg(order(1 "Children with siblings" 3 "1 sibling" 5 "2 siblings" 7 "`legend_sib_${max_sibs}'")) ///
										leg(order(1 "1 sibling" 3 "2 siblings" 5 "`legend_sib_${max_sibs}'")) ///
										coeflabels(year_t_b6 = "2014" year_t_b5 = "2015" year_t_b4 = "2016" year_t_b3 = "2017" year_t_b2 = "2018" year_t_o1 = "2019" year_t_a0 = "2020" year_t_a1 = "2021" year_t_a2 = "2022" year_t_a3 = "2023" year_t_a4 = "2024") ///
										yline(0,  lcolor(gs10))  ///
										ytitle("`xtitle'") ///
										ylab(-.1(.02).04) ///
										///xline(2019.5 2021.5) ///
										subtitle("`tlab'") ///
										legend(pos(6) col(4))
							
							capture qui graph export "$FIGURES\Event Study\covid_event_bysibs_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.png", replace	
							capture qui graph export "$FIGURES\Event Study\covid_event_bysibs_`level'_`only_covid'_`v'_T`treatment_type'_S`subsample'_`other_filters'${max_sibs}${covid_data}.pdf", replace							
						
end





//main
